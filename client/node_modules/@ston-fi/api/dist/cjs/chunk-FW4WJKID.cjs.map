{"version":3,"sources":["/Users/paul-n/git/ston-fi/public/sdk-api/dist/cjs/chunk-FW4WJKID.cjs","../../src/client/mappers/normalizeRequest.ts"],"names":[],"mappings":"AAAA;AACE;AACF,wDAA6B;AAC7B;AACE;AACF,wDAA6B;AAC7B;AACA;ACGO,SAAS,gBAAA,CACd,IAAA,EACA,OAAA,EACA;AACA,EAAA,MAAM,eAAA,EAAiB,IAAA,CAAK,OAAA,CAAQ,oBAAA,EAAsB,CAAC,CAAA,EAAG,GAAA,EAAA,GAAQ;AAdxE,IAAA,IAAA,EAAA,EAAA,EAAA;AAeI,IAAA,MAAM,MAAA,EAAA,CAAQ,GAAA,EAAA,QAAA,GAAA,KAAA,EAAA,KAAA,EAAA,EAAA,OAAA,CAAS,KAAA,EAAA,GAAT,KAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAiB,GAAA,CAAA;AAE/B,IAAA,GAAA,CAAI,CAAC,KAAA,EAAO;AACV,MAAA,MAAM,IAAI,KAAA,CAAM,CAAA,kCAAA,EAAqC,GAAG,CAAA,CAAA,CAAG,CAAA;AAAA,IAC7D;AAEA,IAAA,CAAA,GAAA,EAAO,QAAA,GAAA,KAAA,EAAA,KAAA,EAAA,EAAA,OAAA,CAAS,KAAA,EAAA,GAAhB,KAAA,EAAA,KAAA,EAAA,OAAA,EAAA,CAAwB,GAAA,CAAA;AAExB,IAAA,OAAO,yCAAA,KAAe,CAAA;AAAA,EACxB,CAAC,CAAA;AAED,EAAA,GAAA,CAAI,QAAA,GAAA,KAAA,EAAA,KAAA,EAAA,EAAA,OAAA,CAAS,KAAA,EAAO;AAClB,IAAA,IAAA,CAAA,MAAW,IAAA,GAAO,OAAA,CAAQ,KAAA,EAAO;AAC/B,MAAA,MAAM,MAAA,EAAQ,OAAA,CAAQ,KAAA,CAAM,GAAG,CAAA;AAE/B,MAAA,GAAA,CAAI,OAAO,MAAA,IAAU,QAAA,EAAU;AAC7B,QAAA,OAAA,CAAQ,KAAA,CAAM,GAAG,EAAA,EAAI,yCAAA,KAAe,CAAA;AAAA,MACtC;AAAA,IACF;AAEA,IAAA,OAAA,CAAQ,MAAA,EAAQ,8CAAA,OAAe,CAAQ,KAAK,CAAA;AAAA,EAC9C;AAEA,EAAA,OAAO,CAAC,cAAA,EAAgB,OAAO,CAAA;AACjC;ADVA;AACA;AACE;AACF,4CAAC","file":"/Users/paul-n/git/ston-fi/public/sdk-api/dist/cjs/chunk-FW4WJKID.cjs","sourcesContent":[null,"import type { FetchOptions } from \"ofetch\";\n\nimport { decamelizeKeys } from \"../../utils/decamelizeKeys\";\nimport { toUrlSafe } from \"../../utils/toUrlSafe\";\n\n/**\n * Apply following transformations to the fetch request:\n * - replace all non-URL-safe characters with their URL-safe counterparts in the path and query.\n * - deep transform all camelCase keys in the query to snake_case.\n */\nexport function normalizeRequest<T extends FetchOptions>(\n  path: string,\n  options?: T,\n) {\n  const pathWithParams = path.replace(/{([a-zA-Z0-9_]+)}/g, (_, key) => {\n    const value = options?.query?.[key];\n\n    if (!value) {\n      throw new Error(`Missing value for path parameter \"${key}\"`);\n    }\n\n    delete options?.query?.[key];\n\n    return toUrlSafe(value);\n  });\n\n  if (options?.query) {\n    for (const key in options.query) {\n      const value = options.query[key];\n\n      if (typeof value === \"string\") {\n        options.query[key] = toUrlSafe(value);\n      }\n    }\n\n    options.query = decamelizeKeys(options.query);\n  }\n\n  return [pathWithParams, options] as const;\n}\n"]}