{"version":3,"sources":["/Users/paul-n/git/ston-fi/public/sdk-api/dist/cjs/chunk-3ZKLGIWN.cjs","../../node_modules/.pnpm/map-obj@4.3.0/node_modules/map-obj/index.js","../../node_modules/.pnpm/decamelize-keys@2.0.1/node_modules/decamelize-keys/index.js","../../node_modules/.pnpm/decamelize@6.0.0/node_modules/decamelize/index.js","../../src/utils/decamelizeKeys.ts"],"names":["isObject","mapObject"],"mappings":"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","file":"/Users/paul-n/git/ston-fi/public/sdk-api/dist/cjs/chunk-3ZKLGIWN.cjs","sourcesContent":[null,"'use strict';\n\nconst isObject = value => typeof value === 'object' && value !== null;\nconst mapObjectSkip = Symbol('skip');\n\n// Customized for this use-case\nconst isObjectCustom = value =>\n\tisObject(value) &&\n\t!(value instanceof RegExp) &&\n\t!(value instanceof Error) &&\n\t!(value instanceof Date);\n\nconst mapObject = (object, mapper, options, isSeen = new WeakMap()) => {\n\toptions = {\n\t\tdeep: false,\n\t\ttarget: {},\n\t\t...options\n\t};\n\n\tif (isSeen.has(object)) {\n\t\treturn isSeen.get(object);\n\t}\n\n\tisSeen.set(object, options.target);\n\n\tconst {target} = options;\n\tdelete options.target;\n\n\tconst mapArray = array => array.map(element => isObjectCustom(element) ? mapObject(element, mapper, options, isSeen) : element);\n\tif (Array.isArray(object)) {\n\t\treturn mapArray(object);\n\t}\n\n\tfor (const [key, value] of Object.entries(object)) {\n\t\tconst mapResult = mapper(key, value, object);\n\n\t\tif (mapResult === mapObjectSkip) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tlet [newKey, newValue, {shouldRecurse = true} = {}] = mapResult;\n\n\t\t// Drop `__proto__` keys.\n\t\tif (newKey === '__proto__') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (options.deep && shouldRecurse && isObjectCustom(newValue)) {\n\t\t\tnewValue = Array.isArray(newValue) ?\n\t\t\t\tmapArray(newValue) :\n\t\t\t\tmapObject(newValue, mapper, options, isSeen);\n\t\t}\n\n\t\ttarget[newKey] = newValue;\n\t}\n\n\treturn target;\n};\n\nmodule.exports = (object, mapper, options) => {\n\tif (!isObject(object)) {\n\t\tthrow new TypeError(`Expected an object, got \\`${object}\\` (${typeof object})`);\n\t}\n\n\treturn mapObject(object, mapper, options);\n};\n\nmodule.exports.mapObjectSkip = mapObjectSkip;\n","import mapObject from 'map-obj';\nimport QuickLru from 'quick-lru';\nimport decamelize from 'decamelize';\n\nconst has = (array, key) => array.some(element => {\n\tif (typeof element === 'string') {\n\t\treturn element === key;\n\t}\n\n\telement.lastIndex = 0;\n\n\treturn element.test(key);\n});\n\nconst cache = new QuickLru({maxSize: 100_000});\n\n// Reproduces behavior from `map-obj`.\nconst isObject = value =>\n\ttypeof value === 'object'\n\t\t&& value !== null\n\t\t&& !(value instanceof RegExp)\n\t\t&& !(value instanceof Error)\n\t\t&& !(value instanceof Date);\n\nconst transform = (input, options = {}) => {\n\tif (!isObject(input)) {\n\t\treturn input;\n\t}\n\n\tconst {\n\t\tseparator = '_',\n\t\texclude,\n\t\tdeep = false,\n\t} = options;\n\n\tconst makeMapper = parentPath => (key, value) => {\n\t\tif (deep && isObject(value)) {\n\t\t\tconst path = parentPath === undefined ? key : `${parentPath}.${key}`;\n\t\t\tvalue = mapObject(value, makeMapper(path));\n\t\t}\n\n\t\tif (!(exclude && has(exclude, key))) {\n\t\t\tconst cacheKey = `${separator}${key}`;\n\n\t\t\tif (cache.has(cacheKey)) {\n\t\t\t\tkey = cache.get(cacheKey);\n\t\t\t} else {\n\t\t\t\tconst returnValue = decamelize(key, {separator});\n\n\t\t\t\tif (key.length < 100) { // Prevent abuse\n\t\t\t\t\tcache.set(cacheKey, returnValue);\n\t\t\t\t}\n\n\t\t\t\tkey = returnValue;\n\t\t\t}\n\t\t}\n\n\t\treturn [key, value];\n\t};\n\n\treturn mapObject(input, makeMapper(undefined));\n};\n\nexport default function decamelizeKeys(input, options) {\n\tif (Array.isArray(input)) {\n\t\treturn Object.keys(input).map(key => transform(input[key], options));\n\t}\n\n\treturn transform(input, options);\n}\n","const handlePreserveConsecutiveUppercase = (decamelized, separator) => {\n\t// Lowercase all single uppercase characters. As we\n\t// want to preserve uppercase sequences, we cannot\n\t// simply lowercase the separated string at the end.\n\t// `data_For_USACounties` → `data_for_USACounties`\n\tdecamelized = decamelized.replace(\n\t\t/((?<![\\p{Uppercase_Letter}\\d])[\\p{Uppercase_Letter}\\d](?![\\p{Uppercase_Letter}\\d]))/gu,\n\t\t$0 => $0.toLowerCase(),\n\t);\n\n\t// Remaining uppercase sequences will be separated from lowercase sequences.\n\t// `data_For_USACounties` → `data_for_USA_counties`\n\treturn decamelized.replace(\n\t\t/(\\p{Uppercase_Letter}+)(\\p{Uppercase_Letter}\\p{Lowercase_Letter}+)/gu,\n\t\t(_, $1, $2) => $1 + separator + $2.toLowerCase(),\n\t);\n};\n\nexport default function decamelize(\n\ttext,\n\t{\n\t\tseparator = '_',\n\t\tpreserveConsecutiveUppercase = false,\n\t} = {},\n) {\n\tif (!(typeof text === 'string' && typeof separator === 'string')) {\n\t\tthrow new TypeError(\n\t\t\t'The `text` and `separator` arguments should be of type `string`',\n\t\t);\n\t}\n\n\t// Checking the second character is done later on. Therefore process shorter strings here.\n\tif (text.length < 2) {\n\t\treturn preserveConsecutiveUppercase ? text : text.toLowerCase();\n\t}\n\n\tconst replacement = `$1${separator}$2`;\n\n\t// Split lowercase sequences followed by uppercase character.\n\t// `dataForUSACounties` → `data_For_USACounties`\n\t// `myURLstring → `my_URLstring`\n\tconst decamelized = text.replace(\n\t\t/([\\p{Lowercase_Letter}\\d])(\\p{Uppercase_Letter})/gu,\n\t\treplacement,\n\t);\n\n\tif (preserveConsecutiveUppercase) {\n\t\treturn handlePreserveConsecutiveUppercase(decamelized, separator);\n\t}\n\n\t// Split multiple uppercase characters followed by one or more lowercase characters.\n\t// `my_URLstring` → `my_ur_lstring`\n\treturn decamelized\n\t\t.replace(\n\t\t\t/(\\p{Uppercase_Letter})(\\p{Uppercase_Letter}\\p{Lowercase_Letter}+)/gu,\n\t\t\treplacement,\n\t\t)\n\t\t.toLowerCase();\n}\n","import _decamelizeKeys from \"decamelize-keys\";\n\n/**\n * Transforms object keys from camel case to snake case.\n * Powered by [decamelize-keys](https://github.com/sindresorhus/decamelize-keys)\n *\n * @param obj Object with possible camel case keys.\n * @returns Object where all camel case keys are transformed to snake case.\n */\nexport function decamelizeKeys<T extends Record<string, unknown>>(val: T) {\n  return _decamelizeKeys(val, { deep: true });\n}\n"]}