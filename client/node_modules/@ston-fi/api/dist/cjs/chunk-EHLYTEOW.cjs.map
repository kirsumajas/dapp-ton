{"version":3,"sources":["/Users/paul-n/git/ston-fi/public/sdk-api/dist/cjs/chunk-EHLYTEOW.cjs","../../src/client/apiClient.ts"],"names":[],"mappings":"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","file":"/Users/paul-n/git/ston-fi/public/sdk-api/dist/cjs/chunk-EHLYTEOW.cjs","sourcesContent":[null,"import { ofetch } from \"ofetch\";\n\nimport { normalizeDate } from \"../utils/normalizeDate\";\n\nimport { normalizeRequest } from \"./mappers/normalizeRequest\";\nimport { normalizeResponse } from \"./mappers/normalizeResponse\";\n\nimport type { AssetInfoResponse, AssetInfoV2Response } from \"./types/asset\";\nimport type { FarmInfoResponse } from \"./types/farm\";\nimport type {\n  LiquidityProvisionSimulationQuery,\n  LiquidityProvisionSimulationResponse,\n} from \"./types/liquidityProvision\";\nimport type { OperationInfoResponse, OperationType } from \"./types/operation\";\nimport type { PoolInfoResponse } from \"./types/pool\";\nimport type { RouterInfoResponse } from \"./types/router\";\nimport type { SwapSimulationResponse, SwapStatusResponse } from \"./types/swap\";\n\nexport type StonApiClientOptions = {\n  baseURL?: string;\n  /** @deprecated use `baseURL` instead to better match `FetchOptions` */\n  baseUrl?: string;\n};\n\nexport class StonApiClient {\n  private readonly apiFetch;\n\n  constructor(options?: StonApiClientOptions) {\n    // Following code is needed to carry over the query params\n    // from \"options.baseUrl\" to all requests because \"ofetch\" doesn't do it automatically\n    // \"ofetch('/baz', { baseURL: 'http://site.com?foo=bar' })\" > \"http://site.com?foo=bar/baz\"\n\n    const baseUrl = new URL(\n      options?.baseURL ?? options?.baseUrl ?? \"https://api.ston.fi\",\n    );\n    const baseQuery = [...new URLSearchParams(baseUrl.search)].reduce(\n      // biome-ignore lint/performance/noAccumulatingSpread: it's ok here\n      (acc, [key, value]) => ({ ...acc, [key]: value }),\n      {},\n    );\n\n    this.apiFetch = ofetch.create({\n      baseURL: `${baseUrl.origin}${baseUrl.pathname}`,\n      query: baseQuery,\n    });\n  }\n\n  public async getAsset(assetAddress: string) {\n    return normalizeResponse(\n      await this.apiFetch<{ asset: AssetInfoResponse }>(\n        ...normalizeRequest(\"/v1/assets/{assetAddress}\", {\n          method: \"GET\",\n          query: { assetAddress },\n        }),\n      ),\n    ).asset;\n  }\n\n  public async getAssets() {\n    return normalizeResponse(\n      await this.apiFetch<{ asset_list: AssetInfoResponse[] }>(\n        ...normalizeRequest(\"/v1/assets\", {\n          method: \"GET\",\n        }),\n      ),\n    ).assetList;\n  }\n\n  public async queryAssets({\n    unconditionalAssets: unconditionalAsset,\n    ...query\n  }: {\n    condition: string;\n    walletAddress?: string;\n    unconditionalAssets?: string[];\n  }) {\n    return normalizeResponse(\n      await this.apiFetch<{ asset_list: AssetInfoV2Response[] }>(\n        ...normalizeRequest(\"/v1/assets/query\", {\n          method: \"POST\",\n          query: {\n            ...query,\n            unconditionalAsset,\n          },\n        }),\n      ),\n    ).assetList;\n  }\n\n  public async searchAssets({\n    unconditionalAssets: unconditionalAsset,\n    ...query\n  }: {\n    searchString: string;\n    condition: string;\n    walletAddress?: string;\n    unconditionalAssets?: string[];\n    limit?: number;\n  }) {\n    return normalizeResponse(\n      await this.apiFetch<{ asset_list: AssetInfoV2Response[] }>(\n        ...normalizeRequest(\"/v1/assets/search\", {\n          method: \"POST\",\n          query: {\n            ...query,\n            unconditionalAsset,\n          },\n        }),\n      ),\n    ).assetList;\n  }\n\n  public async getFarm(farmAddress: string) {\n    return normalizeResponse(\n      await this.apiFetch<{ farm: FarmInfoResponse }>(\n        ...normalizeRequest(\"/v1/farms/{farmAddress}\", {\n          method: \"GET\",\n          query: { farmAddress },\n        }),\n      ),\n    ).farm;\n  }\n\n  public async getFarms(query?: {\n    /**\n     * If true farms for V2 pools will be present in the response.\n     *\n     * @default true\n     */\n    dexV2?: boolean;\n  }) {\n    return normalizeResponse(\n      await this.apiFetch<{ farm_list: FarmInfoResponse[] }>(\n        ...normalizeRequest(\"/v1/farms\", {\n          method: \"GET\",\n          query,\n        }),\n      ),\n    ).farmList;\n  }\n\n  public async getFarmsByPool(poolAddress: string) {\n    return normalizeResponse(\n      await this.apiFetch<{ farm_list: FarmInfoResponse[] }>(\n        ...normalizeRequest(\"/v1/farms_by_pool/{poolAddress}\", {\n          method: \"GET\",\n          query: { poolAddress },\n        }),\n      ),\n    ).farmList;\n  }\n\n  public async getSwapPairs(query?: {\n    /**\n     * If true V2 pool pairs will be present in the response.\n     *\n     * @default true\n     */\n    dexV2?: boolean;\n  }) {\n    return normalizeResponse(\n      await this.apiFetch<{ pairs: [string, string][] }>(\n        ...normalizeRequest(\"/v1/markets\", {\n          method: \"GET\",\n          query,\n        }),\n      ),\n    ).pairs;\n  }\n\n  public async getSwapStatus(query: {\n    routerAddress: string;\n    ownerAddress: string;\n    queryId: string;\n  }) {\n    return normalizeResponse(\n      await this.apiFetch<SwapStatusResponse>(\n        ...normalizeRequest(\"/v1/swap/status\", {\n          method: \"GET\",\n          query,\n        }),\n      ),\n    );\n  }\n\n  public async getPool(data: string | { poolAddress: string }) {\n    return normalizeResponse(\n      await this.apiFetch<{ pool: PoolInfoResponse }>(\n        ...normalizeRequest(\"/v1/pools/{poolAddress}\", {\n          method: \"GET\",\n          query: typeof data === \"string\" ? { poolAddress: data } : data,\n        }),\n      ),\n    ).pool;\n  }\n\n  public async getPools(query?: {\n    /**\n     * If true V2 pools will be present in the response.\n     *\n     * @default true\n     */\n    dexV2?: boolean;\n  }) {\n    return normalizeResponse(\n      await this.apiFetch<{ pool_list: PoolInfoResponse[] }>(\n        ...normalizeRequest(\"/v1/pools\", {\n          method: \"GET\",\n          query,\n        }),\n      ),\n    ).poolList;\n  }\n\n  public async getPoolsByAssetPair(query: {\n    asset0Address: string;\n    asset1Address: string;\n  }) {\n    return normalizeResponse(\n      await this.apiFetch<{ pool_list: PoolInfoResponse[] }>(\n        ...normalizeRequest(\n          \"/v1/pools/by_market/{asset0Address}/{asset1Address}\",\n          {\n            method: \"GET\",\n            query,\n          },\n        ),\n      ),\n    ).poolList;\n  }\n\n  public async queryPools({\n    unconditionalAssets: unconditionalAsset,\n    ...query\n  }: {\n    condition: string;\n    walletAddress?: string;\n    unconditionalAssets?: string[];\n    /**\n     * If true V2 pools will be present in the response.\n     *\n     * @default true\n     */\n    dexV2?: boolean;\n  }) {\n    return normalizeResponse(\n      await this.apiFetch<{ pool_list: PoolInfoResponse[] }>(\n        ...normalizeRequest(\"/v1/pool/query\", {\n          method: \"POST\",\n          query: {\n            ...query,\n            unconditionalAsset,\n          },\n        }),\n      ),\n    ).poolList;\n  }\n\n  public async simulateSwap({\n    offerUnits: units,\n    ...query\n  }: {\n    /** The address of the token we want to sell */\n    offerAddress: string;\n    /** Number of token units we want to sell */\n    offerUnits: string;\n    /** The address of the token we want to buy */\n    askAddress: string;\n    /**\n     * The maximum possible difference between the rates that we expect and which will actually be,\n     * in fractions (for example, 0.001 is 0.1%)\n     *\n     * Recommended value is 0.01 (1%)\n     */\n    slippageTolerance: string;\n    /**\n     * Referral address\n     *\n     * @default undefined\n     */\n    referralAddress?: string;\n    /**\n     * Referral fee in base points\n     *\n     * Applies only for dex v2, for v1 is always 10 (0.1%)\n     * Applies only if `referralAddress` is set\n     * Should be in range [0, 100] BPS\n     *\n     * @default undefined\n     */\n    referralFeeBps?: string;\n    /**\n     * If true V2 pools might be selected for the swap.\n     *\n     * @default true\n     */\n    dexV2?: boolean;\n    /**\n     * Allows to restrict exact DEX version (or multiple) to be used for the swap.\n     *\n     * @default undefined\n     */\n    dexVersion?: Array<\"1\" | 1 | \"2\" | 2>;\n  }) {\n    return normalizeResponse(\n      await this.apiFetch<SwapSimulationResponse>(\n        ...normalizeRequest(\"/v1/swap/simulate\", {\n          method: \"POST\",\n          query: {\n            ...query,\n            units,\n          },\n        }),\n      ),\n    );\n  }\n\n  public async simulateReverseSwap({\n    askUnits: units,\n    ...query\n  }: {\n    /** The address of the token we want to sell */\n    offerAddress: string;\n    /** The address of the token we want to buy */\n    askAddress: string;\n    /** Number of token units we want to buy */\n    askUnits: string;\n    /**\n     * The maximum possible difference between the rates that we expect and which will actually be,\n     * in fractions (for example, 0.001 is 0.1%)\n     *\n     * Recommended value is 0.01 (1%)\n     */\n    slippageTolerance: string;\n    /**\n     * Referral address\n     *\n     * @default undefined\n     */\n    referralAddress?: string;\n    /**\n     * Referral fee in base points. Should be in range [0, 100] BPS\n     *\n     * Applies only if `referralAddress` is set\n     * Applies only for dex v2, for v1 is always 10 BPS (0.1%)\n     *\n     * @default undefined\n     */\n    referralFeeBps?: string;\n    /**\n     * If true V2 pools might be selected for the swap.\n     *\n     * @default true\n     */\n    dexV2?: boolean;\n    /**\n     * Allows to restrict exact DEX version (or multiple) to be used for the swap.\n     *\n     * @default undefined\n     */\n    dexVersion?: Array<\"1\" | 1 | \"2\" | 2>;\n  }) {\n    return normalizeResponse(\n      await this.apiFetch<SwapSimulationResponse>(\n        ...normalizeRequest(\"/v1/reverse_swap/simulate\", {\n          method: \"POST\",\n          query: {\n            ...query,\n            units,\n          },\n        }),\n      ),\n    );\n  }\n\n  public async simulateLiquidityProvision(\n    query: LiquidityProvisionSimulationQuery,\n  ) {\n    return normalizeResponse(\n      await this.apiFetch<LiquidityProvisionSimulationResponse>(\n        ...normalizeRequest(\"/v1/liquidity_provision/simulate\", {\n          method: \"POST\",\n          query,\n        }),\n      ),\n    );\n  }\n\n  public async getJettonWalletAddress(query: {\n    jettonAddress: string;\n    ownerAddress: string;\n  }) {\n    return normalizeResponse(\n      await this.apiFetch<{ address: string }>(\n        ...normalizeRequest(\"/v1/jetton/{jettonAddress}/address\", {\n          method: \"GET\",\n          query,\n        }),\n      ),\n    ).address;\n  }\n\n  public async getWalletAsset(query: {\n    walletAddress: string;\n    assetAddress: string;\n  }) {\n    return normalizeResponse(\n      await this.apiFetch<{ asset: AssetInfoResponse }>(\n        ...normalizeRequest(\n          \"/v1/wallets/{walletAddress}/assets/{assetAddress}\",\n          {\n            method: \"GET\",\n            query,\n          },\n        ),\n      ),\n    ).asset;\n  }\n\n  public async getWalletAssets(walletAddress: string) {\n    return normalizeResponse(\n      await this.apiFetch<{ asset_list: AssetInfoResponse[] }>(\n        ...normalizeRequest(\"/v1/wallets/{walletAddress}/assets\", {\n          method: \"GET\",\n          query: { walletAddress },\n        }),\n      ),\n    ).assetList;\n  }\n\n  public async getWalletFarm(query: {\n    walletAddress: string;\n    farmAddress: string;\n  }) {\n    return normalizeResponse(\n      await this.apiFetch<{ farm: FarmInfoResponse }>(\n        ...normalizeRequest(\"/v1/wallets/{walletAddress}/farms/{farmAddress}\", {\n          method: \"GET\",\n          query,\n        }),\n      ),\n    ).farm;\n  }\n\n  public async getWalletFarms(\n    /**\n     * Wallet address.\n     *\n     * @deprecated Use object with `walletAddress` property instead.\n     */\n    data:\n      | string\n      | {\n          walletAddress: string;\n          /**\n           * If true farms for V2 pools will be present in the response.\n           *\n           * @default true\n           */\n          dexV2?: boolean;\n        },\n  ) {\n    return normalizeResponse(\n      await this.apiFetch<{ farm_list: FarmInfoResponse[] }>(\n        ...normalizeRequest(\"/v1/wallets/{walletAddress}/farms\", {\n          method: \"GET\",\n          query: typeof data === \"string\" ? { walletAddress: data } : data,\n        }),\n      ),\n    ).farmList;\n  }\n\n  public async getWalletPool(query: {\n    walletAddress: string;\n    poolAddress: string;\n  }) {\n    return normalizeResponse(\n      await this.apiFetch<{ pool: PoolInfoResponse }>(\n        ...normalizeRequest(\"/v1/wallets/{walletAddress}/pools/{poolAddress}\", {\n          method: \"GET\",\n          query,\n        }),\n      ),\n    ).pool;\n  }\n\n  public async getWalletPools(\n    /**\n     * Wallet address.\n     *\n     * @deprecated Use object with `walletAddress` property instead.\n     */\n    data:\n      | string\n      | {\n          walletAddress: string;\n          /**\n           * If true V2 pools will be present in the response.\n           *\n           * @default true\n           */\n          dexV2?: boolean;\n        },\n  ) {\n    return normalizeResponse(\n      await this.apiFetch<{ pool_list: PoolInfoResponse[] }>(\n        ...normalizeRequest(\"/v1/wallets/{walletAddress}/pools\", {\n          method: \"GET\",\n          query: typeof data === \"string\" ? { walletAddress: data } : data,\n        }),\n      ),\n    ).poolList;\n  }\n\n  public async getWalletOperations({\n    since,\n    until,\n    ...query\n  }: {\n    since: Date;\n    until: Date;\n    walletAddress: string;\n    /**\n     * If true V2 pool operations will be present in the response.\n     *\n     * @default true\n     */\n    dexV2?: boolean;\n    opType?: OperationType;\n  }) {\n    return normalizeResponse(\n      await this.apiFetch<{ operations: OperationInfoResponse[] }>(\n        ...normalizeRequest(\"/v1/wallets/{walletAddress}/operations\", {\n          method: \"GET\",\n          query: {\n            ...query,\n            since: normalizeDate(since),\n            until: normalizeDate(until),\n          },\n        }),\n      ),\n    ).operations;\n  }\n\n  public async getOperations({ since, until }: { since: Date; until: Date }) {\n    return normalizeResponse(\n      await this.apiFetch<{ operations: OperationInfoResponse[] }>(\n        ...normalizeRequest(\"/v1/stats/operations\", {\n          method: \"GET\",\n          query: {\n            since: normalizeDate(since),\n            until: normalizeDate(until),\n          },\n        }),\n      ),\n    ).operations;\n  }\n\n  public async getRouters(query?: {\n    /**\n     * If true V2 routers will be present in the response.\n     *\n     * @default true\n     */\n    dexV2?: boolean;\n  }) {\n    return normalizeResponse(\n      await this.apiFetch<{ router_list: RouterInfoResponse[] }>(\n        ...normalizeRequest(\"/v1/routers\", {\n          method: \"GET\",\n          query,\n        }),\n      ),\n    ).routerList;\n  }\n\n  public async getRouter(routerAddress: string) {\n    return normalizeResponse(\n      await this.apiFetch<{ router: RouterInfoResponse }>(\n        ...normalizeRequest(\"/v1/routers/{routerAddress}\", {\n          method: \"GET\",\n          query: {\n            routerAddress,\n          },\n        }),\n      ),\n    ).router;\n  }\n}\n"]}