{"version":3,"sources":["/Users/paul-n/git/ston-fi/public/sdk-api/dist/cjs/chunk-4WNP7NNN.cjs","../../node_modules/.pnpm/map-obj@5.0.0/node_modules/map-obj/index.js","../../node_modules/.pnpm/camelcase@8.0.0/node_modules/camelcase/index.js","../../node_modules/.pnpm/camelcase-keys@9.1.3/node_modules/camelcase-keys/index.js","../../src/utils/camelcaseKeys.ts"],"names":["preserveConsecutiveUppercase","isObject"],"mappings":"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","file":"/Users/paul-n/git/ston-fi/public/sdk-api/dist/cjs/chunk-4WNP7NNN.cjs","sourcesContent":[null,"const isObject = value => typeof value === 'object' && value !== null;\n\n// Customized for this use-case\nconst isObjectCustom = value =>\n\tisObject(value)\n\t&& !(value instanceof RegExp)\n\t&& !(value instanceof Error)\n\t&& !(value instanceof Date);\n\nexport const mapObjectSkip = Symbol('mapObjectSkip');\n\nconst _mapObject = (object, mapper, options, isSeen = new WeakMap()) => {\n\toptions = {\n\t\tdeep: false,\n\t\ttarget: {},\n\t\t...options,\n\t};\n\n\tif (isSeen.has(object)) {\n\t\treturn isSeen.get(object);\n\t}\n\n\tisSeen.set(object, options.target);\n\n\tconst {target} = options;\n\tdelete options.target;\n\n\tconst mapArray = array => array.map(element => isObjectCustom(element) ? _mapObject(element, mapper, options, isSeen) : element);\n\tif (Array.isArray(object)) {\n\t\treturn mapArray(object);\n\t}\n\n\tfor (const [key, value] of Object.entries(object)) {\n\t\tconst mapResult = mapper(key, value, object);\n\n\t\tif (mapResult === mapObjectSkip) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tlet [newKey, newValue, {shouldRecurse = true} = {}] = mapResult;\n\n\t\t// Drop `__proto__` keys.\n\t\tif (newKey === '__proto__') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (options.deep && shouldRecurse && isObjectCustom(newValue)) {\n\t\t\tnewValue = Array.isArray(newValue)\n\t\t\t\t? mapArray(newValue)\n\t\t\t\t: _mapObject(newValue, mapper, options, isSeen);\n\t\t}\n\n\t\ttarget[newKey] = newValue;\n\t}\n\n\treturn target;\n};\n\nexport default function mapObject(object, mapper, options) {\n\tif (!isObject(object)) {\n\t\tthrow new TypeError(`Expected an object, got \\`${object}\\` (${typeof object})`);\n\t}\n\n\treturn _mapObject(object, mapper, options);\n}\n","const UPPERCASE = /[\\p{Lu}]/u;\nconst LOWERCASE = /[\\p{Ll}]/u;\nconst LEADING_CAPITAL = /^[\\p{Lu}](?![\\p{Lu}])/gu;\nconst IDENTIFIER = /([\\p{Alpha}\\p{N}_]|$)/u;\nconst SEPARATORS = /[_.\\- ]+/;\n\nconst LEADING_SEPARATORS = new RegExp('^' + SEPARATORS.source);\nconst SEPARATORS_AND_IDENTIFIER = new RegExp(SEPARATORS.source + IDENTIFIER.source, 'gu');\nconst NUMBERS_AND_IDENTIFIER = new RegExp('\\\\d+' + IDENTIFIER.source, 'gu');\n\nconst preserveCamelCase = (string, toLowerCase, toUpperCase, preserveConsecutiveUppercase) => {\n\tlet isLastCharLower = false;\n\tlet isLastCharUpper = false;\n\tlet isLastLastCharUpper = false;\n\tlet isLastLastCharPreserved = false;\n\n\tfor (let index = 0; index < string.length; index++) {\n\t\tconst character = string[index];\n\t\tisLastLastCharPreserved = index > 2 ? string[index - 3] === '-' : true;\n\n\t\tif (isLastCharLower && UPPERCASE.test(character)) {\n\t\t\tstring = string.slice(0, index) + '-' + string.slice(index);\n\t\t\tisLastCharLower = false;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = true;\n\t\t\tindex++;\n\t\t} else if (isLastCharUpper && isLastLastCharUpper && LOWERCASE.test(character) && (!isLastLastCharPreserved || preserveConsecutiveUppercase)) {\n\t\t\tstring = string.slice(0, index - 1) + '-' + string.slice(index - 1);\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = false;\n\t\t\tisLastCharLower = true;\n\t\t} else {\n\t\t\tisLastCharLower = toLowerCase(character) === character && toUpperCase(character) !== character;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = toUpperCase(character) === character && toLowerCase(character) !== character;\n\t\t}\n\t}\n\n\treturn string;\n};\n\nconst preserveConsecutiveUppercase = (input, toLowerCase) => {\n\tLEADING_CAPITAL.lastIndex = 0;\n\n\treturn input.replaceAll(LEADING_CAPITAL, match => toLowerCase(match));\n};\n\nconst postProcess = (input, toUpperCase) => {\n\tSEPARATORS_AND_IDENTIFIER.lastIndex = 0;\n\tNUMBERS_AND_IDENTIFIER.lastIndex = 0;\n\n\treturn input\n\t\t.replaceAll(NUMBERS_AND_IDENTIFIER, (match, pattern, offset) => ['_', '-'].includes(input.charAt(offset + match.length)) ? match : toUpperCase(match))\n\t\t.replaceAll(SEPARATORS_AND_IDENTIFIER, (_, identifier) => toUpperCase(identifier));\n};\n\nexport default function camelCase(input, options) {\n\tif (!(typeof input === 'string' || Array.isArray(input))) {\n\t\tthrow new TypeError('Expected the input to be `string | string[]`');\n\t}\n\n\toptions = {\n\t\tpascalCase: false,\n\t\tpreserveConsecutiveUppercase: false,\n\t\t...options,\n\t};\n\n\tif (Array.isArray(input)) {\n\t\tinput = input.map(x => x.trim())\n\t\t\t.filter(x => x.length)\n\t\t\t.join('-');\n\t} else {\n\t\tinput = input.trim();\n\t}\n\n\tif (input.length === 0) {\n\t\treturn '';\n\t}\n\n\tconst toLowerCase = options.locale === false\n\t\t? string => string.toLowerCase()\n\t\t: string => string.toLocaleLowerCase(options.locale);\n\n\tconst toUpperCase = options.locale === false\n\t\t? string => string.toUpperCase()\n\t\t: string => string.toLocaleUpperCase(options.locale);\n\n\tif (input.length === 1) {\n\t\tif (SEPARATORS.test(input)) {\n\t\t\treturn '';\n\t\t}\n\n\t\treturn options.pascalCase ? toUpperCase(input) : toLowerCase(input);\n\t}\n\n\tconst hasUpperCase = input !== toLowerCase(input);\n\n\tif (hasUpperCase) {\n\t\tinput = preserveCamelCase(input, toLowerCase, toUpperCase, options.preserveConsecutiveUppercase);\n\t}\n\n\tinput = input.replace(LEADING_SEPARATORS, '');\n\tinput = options.preserveConsecutiveUppercase ? preserveConsecutiveUppercase(input, toLowerCase) : toLowerCase(input);\n\n\tif (options.pascalCase) {\n\t\tinput = toUpperCase(input.charAt(0)) + input.slice(1);\n\t}\n\n\treturn postProcess(input, toUpperCase);\n}\n","import mapObject from 'map-obj';\nimport camelCase from 'camelcase';\nimport QuickLru from 'quick-lru';\n\nconst has = (array, key) => array.some(element => {\n\tif (typeof element === 'string') {\n\t\treturn element === key;\n\t}\n\n\telement.lastIndex = 0;\n\n\treturn element.test(key);\n});\n\nconst cache = new QuickLru({maxSize: 100_000});\n\n// Reproduces behavior from `map-obj`.\nconst isObject = value =>\n\ttypeof value === 'object'\n\t\t&& value !== null\n\t\t&& !(value instanceof RegExp)\n\t\t&& !(value instanceof Error)\n\t\t&& !(value instanceof Date);\n\nconst transform = (input, options = {}) => {\n\tif (!isObject(input)) {\n\t\treturn input;\n\t}\n\n\tconst {\n\t\texclude,\n\t\tpascalCase = false,\n\t\tstopPaths,\n\t\tdeep = false,\n\t\tpreserveConsecutiveUppercase = false,\n\t} = options;\n\n\tconst stopPathsSet = new Set(stopPaths);\n\n\tconst makeMapper = parentPath => (key, value) => {\n\t\tif (deep && isObject(value)) {\n\t\t\tconst path = parentPath === undefined ? key : `${parentPath}.${key}`;\n\n\t\t\tif (!stopPathsSet.has(path)) {\n\t\t\t\tvalue = mapObject(value, makeMapper(path));\n\t\t\t}\n\t\t}\n\n\t\tif (!(exclude && has(exclude, key))) {\n\t\t\tconst cacheKey = pascalCase ? `${key}_` : key;\n\n\t\t\tif (cache.has(cacheKey)) {\n\t\t\t\tkey = cache.get(cacheKey);\n\t\t\t} else {\n\t\t\t\tconst returnValue = camelCase(key, {pascalCase, locale: false, preserveConsecutiveUppercase});\n\n\t\t\t\tif (key.length < 100) { // Prevent abuse\n\t\t\t\t\tcache.set(cacheKey, returnValue);\n\t\t\t\t}\n\n\t\t\t\tkey = returnValue;\n\t\t\t}\n\t\t}\n\n\t\treturn [key, value];\n\t};\n\n\treturn mapObject(input, makeMapper(undefined));\n};\n\nexport default function camelcaseKeys(input, options) {\n\tif (Array.isArray(input)) {\n\t\treturn Object.keys(input).map(key => transform(input[key], options));\n\t}\n\n\treturn transform(input, options);\n}\n","import _camelcaseKeys from \"camelcase-keys\";\n\n/**\n * Transforms object keys to camel case.\n * Powered by [camelcase-keys](https://github.com/sindresorhus/camelcase-keys)\n *\n * @param obj Object with possible non-camel case keys.\n * @returns Object where all non-camel case keys are transformed to camel case.\n */\nexport function camelcaseKeys<T extends Record<string, unknown>>(val: T) {\n  return _camelcaseKeys(val, { deep: true });\n}\n"]}