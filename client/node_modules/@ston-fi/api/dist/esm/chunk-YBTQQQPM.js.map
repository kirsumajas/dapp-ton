{"version":3,"sources":["../../src/client/apiClient.ts"],"sourcesContent":["import { ofetch } from \"ofetch\";\n\nimport { normalizeDate } from \"../utils/normalizeDate\";\n\nimport { normalizeRequest } from \"./mappers/normalizeRequest\";\nimport { normalizeResponse } from \"./mappers/normalizeResponse\";\n\nimport type { AssetInfoResponse, AssetInfoV2Response } from \"./types/asset\";\nimport type { FarmInfoResponse } from \"./types/farm\";\nimport type {\n  LiquidityProvisionSimulationQuery,\n  LiquidityProvisionSimulationResponse,\n} from \"./types/liquidityProvision\";\nimport type { OperationInfoResponse, OperationType } from \"./types/operation\";\nimport type { PoolInfoResponse } from \"./types/pool\";\nimport type { RouterInfoResponse } from \"./types/router\";\nimport type { SwapSimulationResponse, SwapStatusResponse } from \"./types/swap\";\n\nexport type StonApiClientOptions = {\n  baseURL?: string;\n  /** @deprecated use `baseURL` instead to better match `FetchOptions` */\n  baseUrl?: string;\n};\n\nexport class StonApiClient {\n  private readonly apiFetch;\n\n  constructor(options?: StonApiClientOptions) {\n    // Following code is needed to carry over the query params\n    // from \"options.baseUrl\" to all requests because \"ofetch\" doesn't do it automatically\n    // \"ofetch('/baz', { baseURL: 'http://site.com?foo=bar' })\" > \"http://site.com?foo=bar/baz\"\n\n    const baseUrl = new URL(\n      options?.baseURL ?? options?.baseUrl ?? \"https://api.ston.fi\",\n    );\n    const baseQuery = [...new URLSearchParams(baseUrl.search)].reduce(\n      // biome-ignore lint/performance/noAccumulatingSpread: it's ok here\n      (acc, [key, value]) => ({ ...acc, [key]: value }),\n      {},\n    );\n\n    this.apiFetch = ofetch.create({\n      baseURL: `${baseUrl.origin}${baseUrl.pathname}`,\n      query: baseQuery,\n    });\n  }\n\n  public async getAsset(assetAddress: string) {\n    return normalizeResponse(\n      await this.apiFetch<{ asset: AssetInfoResponse }>(\n        ...normalizeRequest(\"/v1/assets/{assetAddress}\", {\n          method: \"GET\",\n          query: { assetAddress },\n        }),\n      ),\n    ).asset;\n  }\n\n  public async getAssets() {\n    return normalizeResponse(\n      await this.apiFetch<{ asset_list: AssetInfoResponse[] }>(\n        ...normalizeRequest(\"/v1/assets\", {\n          method: \"GET\",\n        }),\n      ),\n    ).assetList;\n  }\n\n  public async queryAssets({\n    unconditionalAssets: unconditionalAsset,\n    ...query\n  }: {\n    condition: string;\n    walletAddress?: string;\n    unconditionalAssets?: string[];\n  }) {\n    return normalizeResponse(\n      await this.apiFetch<{ asset_list: AssetInfoV2Response[] }>(\n        ...normalizeRequest(\"/v1/assets/query\", {\n          method: \"POST\",\n          query: {\n            ...query,\n            unconditionalAsset,\n          },\n        }),\n      ),\n    ).assetList;\n  }\n\n  public async searchAssets({\n    unconditionalAssets: unconditionalAsset,\n    ...query\n  }: {\n    searchString: string;\n    condition: string;\n    walletAddress?: string;\n    unconditionalAssets?: string[];\n    limit?: number;\n  }) {\n    return normalizeResponse(\n      await this.apiFetch<{ asset_list: AssetInfoV2Response[] }>(\n        ...normalizeRequest(\"/v1/assets/search\", {\n          method: \"POST\",\n          query: {\n            ...query,\n            unconditionalAsset,\n          },\n        }),\n      ),\n    ).assetList;\n  }\n\n  public async getFarm(farmAddress: string) {\n    return normalizeResponse(\n      await this.apiFetch<{ farm: FarmInfoResponse }>(\n        ...normalizeRequest(\"/v1/farms/{farmAddress}\", {\n          method: \"GET\",\n          query: { farmAddress },\n        }),\n      ),\n    ).farm;\n  }\n\n  public async getFarms(query?: {\n    /**\n     * If true farms for V2 pools will be present in the response.\n     *\n     * @default true\n     */\n    dexV2?: boolean;\n  }) {\n    return normalizeResponse(\n      await this.apiFetch<{ farm_list: FarmInfoResponse[] }>(\n        ...normalizeRequest(\"/v1/farms\", {\n          method: \"GET\",\n          query,\n        }),\n      ),\n    ).farmList;\n  }\n\n  public async getFarmsByPool(poolAddress: string) {\n    return normalizeResponse(\n      await this.apiFetch<{ farm_list: FarmInfoResponse[] }>(\n        ...normalizeRequest(\"/v1/farms_by_pool/{poolAddress}\", {\n          method: \"GET\",\n          query: { poolAddress },\n        }),\n      ),\n    ).farmList;\n  }\n\n  public async getSwapPairs(query?: {\n    /**\n     * If true V2 pool pairs will be present in the response.\n     *\n     * @default true\n     */\n    dexV2?: boolean;\n  }) {\n    return normalizeResponse(\n      await this.apiFetch<{ pairs: [string, string][] }>(\n        ...normalizeRequest(\"/v1/markets\", {\n          method: \"GET\",\n          query,\n        }),\n      ),\n    ).pairs;\n  }\n\n  public async getSwapStatus(query: {\n    routerAddress: string;\n    ownerAddress: string;\n    queryId: string;\n  }) {\n    return normalizeResponse(\n      await this.apiFetch<SwapStatusResponse>(\n        ...normalizeRequest(\"/v1/swap/status\", {\n          method: \"GET\",\n          query,\n        }),\n      ),\n    );\n  }\n\n  public async getPool(data: string | { poolAddress: string }) {\n    return normalizeResponse(\n      await this.apiFetch<{ pool: PoolInfoResponse }>(\n        ...normalizeRequest(\"/v1/pools/{poolAddress}\", {\n          method: \"GET\",\n          query: typeof data === \"string\" ? { poolAddress: data } : data,\n        }),\n      ),\n    ).pool;\n  }\n\n  public async getPools(query?: {\n    /**\n     * If true V2 pools will be present in the response.\n     *\n     * @default true\n     */\n    dexV2?: boolean;\n  }) {\n    return normalizeResponse(\n      await this.apiFetch<{ pool_list: PoolInfoResponse[] }>(\n        ...normalizeRequest(\"/v1/pools\", {\n          method: \"GET\",\n          query,\n        }),\n      ),\n    ).poolList;\n  }\n\n  public async getPoolsByAssetPair(query: {\n    asset0Address: string;\n    asset1Address: string;\n  }) {\n    return normalizeResponse(\n      await this.apiFetch<{ pool_list: PoolInfoResponse[] }>(\n        ...normalizeRequest(\n          \"/v1/pools/by_market/{asset0Address}/{asset1Address}\",\n          {\n            method: \"GET\",\n            query,\n          },\n        ),\n      ),\n    ).poolList;\n  }\n\n  public async queryPools({\n    unconditionalAssets: unconditionalAsset,\n    ...query\n  }: {\n    condition: string;\n    walletAddress?: string;\n    unconditionalAssets?: string[];\n    /**\n     * If true V2 pools will be present in the response.\n     *\n     * @default true\n     */\n    dexV2?: boolean;\n  }) {\n    return normalizeResponse(\n      await this.apiFetch<{ pool_list: PoolInfoResponse[] }>(\n        ...normalizeRequest(\"/v1/pool/query\", {\n          method: \"POST\",\n          query: {\n            ...query,\n            unconditionalAsset,\n          },\n        }),\n      ),\n    ).poolList;\n  }\n\n  public async simulateSwap({\n    offerUnits: units,\n    ...query\n  }: {\n    /** The address of the token we want to sell */\n    offerAddress: string;\n    /** Number of token units we want to sell */\n    offerUnits: string;\n    /** The address of the token we want to buy */\n    askAddress: string;\n    /**\n     * The maximum possible difference between the rates that we expect and which will actually be,\n     * in fractions (for example, 0.001 is 0.1%)\n     *\n     * Recommended value is 0.01 (1%)\n     */\n    slippageTolerance: string;\n    /**\n     * Referral address\n     *\n     * @default undefined\n     */\n    referralAddress?: string;\n    /**\n     * Referral fee in base points\n     *\n     * Applies only for dex v2, for v1 is always 10 (0.1%)\n     * Applies only if `referralAddress` is set\n     * Should be in range [0, 100] BPS\n     *\n     * @default undefined\n     */\n    referralFeeBps?: string;\n    /**\n     * If true V2 pools might be selected for the swap.\n     *\n     * @default true\n     */\n    dexV2?: boolean;\n    /**\n     * Allows to restrict exact DEX version (or multiple) to be used for the swap.\n     *\n     * @default undefined\n     */\n    dexVersion?: Array<\"1\" | 1 | \"2\" | 2>;\n  }) {\n    return normalizeResponse(\n      await this.apiFetch<SwapSimulationResponse>(\n        ...normalizeRequest(\"/v1/swap/simulate\", {\n          method: \"POST\",\n          query: {\n            ...query,\n            units,\n          },\n        }),\n      ),\n    );\n  }\n\n  public async simulateReverseSwap({\n    askUnits: units,\n    ...query\n  }: {\n    /** The address of the token we want to sell */\n    offerAddress: string;\n    /** The address of the token we want to buy */\n    askAddress: string;\n    /** Number of token units we want to buy */\n    askUnits: string;\n    /**\n     * The maximum possible difference between the rates that we expect and which will actually be,\n     * in fractions (for example, 0.001 is 0.1%)\n     *\n     * Recommended value is 0.01 (1%)\n     */\n    slippageTolerance: string;\n    /**\n     * Referral address\n     *\n     * @default undefined\n     */\n    referralAddress?: string;\n    /**\n     * Referral fee in base points. Should be in range [0, 100] BPS\n     *\n     * Applies only if `referralAddress` is set\n     * Applies only for dex v2, for v1 is always 10 BPS (0.1%)\n     *\n     * @default undefined\n     */\n    referralFeeBps?: string;\n    /**\n     * If true V2 pools might be selected for the swap.\n     *\n     * @default true\n     */\n    dexV2?: boolean;\n    /**\n     * Allows to restrict exact DEX version (or multiple) to be used for the swap.\n     *\n     * @default undefined\n     */\n    dexVersion?: Array<\"1\" | 1 | \"2\" | 2>;\n  }) {\n    return normalizeResponse(\n      await this.apiFetch<SwapSimulationResponse>(\n        ...normalizeRequest(\"/v1/reverse_swap/simulate\", {\n          method: \"POST\",\n          query: {\n            ...query,\n            units,\n          },\n        }),\n      ),\n    );\n  }\n\n  public async simulateLiquidityProvision(\n    query: LiquidityProvisionSimulationQuery,\n  ) {\n    return normalizeResponse(\n      await this.apiFetch<LiquidityProvisionSimulationResponse>(\n        ...normalizeRequest(\"/v1/liquidity_provision/simulate\", {\n          method: \"POST\",\n          query,\n        }),\n      ),\n    );\n  }\n\n  public async getJettonWalletAddress(query: {\n    jettonAddress: string;\n    ownerAddress: string;\n  }) {\n    return normalizeResponse(\n      await this.apiFetch<{ address: string }>(\n        ...normalizeRequest(\"/v1/jetton/{jettonAddress}/address\", {\n          method: \"GET\",\n          query,\n        }),\n      ),\n    ).address;\n  }\n\n  public async getWalletAsset(query: {\n    walletAddress: string;\n    assetAddress: string;\n  }) {\n    return normalizeResponse(\n      await this.apiFetch<{ asset: AssetInfoResponse }>(\n        ...normalizeRequest(\n          \"/v1/wallets/{walletAddress}/assets/{assetAddress}\",\n          {\n            method: \"GET\",\n            query,\n          },\n        ),\n      ),\n    ).asset;\n  }\n\n  public async getWalletAssets(walletAddress: string) {\n    return normalizeResponse(\n      await this.apiFetch<{ asset_list: AssetInfoResponse[] }>(\n        ...normalizeRequest(\"/v1/wallets/{walletAddress}/assets\", {\n          method: \"GET\",\n          query: { walletAddress },\n        }),\n      ),\n    ).assetList;\n  }\n\n  public async getWalletFarm(query: {\n    walletAddress: string;\n    farmAddress: string;\n  }) {\n    return normalizeResponse(\n      await this.apiFetch<{ farm: FarmInfoResponse }>(\n        ...normalizeRequest(\"/v1/wallets/{walletAddress}/farms/{farmAddress}\", {\n          method: \"GET\",\n          query,\n        }),\n      ),\n    ).farm;\n  }\n\n  public async getWalletFarms(\n    /**\n     * Wallet address.\n     *\n     * @deprecated Use object with `walletAddress` property instead.\n     */\n    data:\n      | string\n      | {\n          walletAddress: string;\n          /**\n           * If true farms for V2 pools will be present in the response.\n           *\n           * @default true\n           */\n          dexV2?: boolean;\n        },\n  ) {\n    return normalizeResponse(\n      await this.apiFetch<{ farm_list: FarmInfoResponse[] }>(\n        ...normalizeRequest(\"/v1/wallets/{walletAddress}/farms\", {\n          method: \"GET\",\n          query: typeof data === \"string\" ? { walletAddress: data } : data,\n        }),\n      ),\n    ).farmList;\n  }\n\n  public async getWalletPool(query: {\n    walletAddress: string;\n    poolAddress: string;\n  }) {\n    return normalizeResponse(\n      await this.apiFetch<{ pool: PoolInfoResponse }>(\n        ...normalizeRequest(\"/v1/wallets/{walletAddress}/pools/{poolAddress}\", {\n          method: \"GET\",\n          query,\n        }),\n      ),\n    ).pool;\n  }\n\n  public async getWalletPools(\n    /**\n     * Wallet address.\n     *\n     * @deprecated Use object with `walletAddress` property instead.\n     */\n    data:\n      | string\n      | {\n          walletAddress: string;\n          /**\n           * If true V2 pools will be present in the response.\n           *\n           * @default true\n           */\n          dexV2?: boolean;\n        },\n  ) {\n    return normalizeResponse(\n      await this.apiFetch<{ pool_list: PoolInfoResponse[] }>(\n        ...normalizeRequest(\"/v1/wallets/{walletAddress}/pools\", {\n          method: \"GET\",\n          query: typeof data === \"string\" ? { walletAddress: data } : data,\n        }),\n      ),\n    ).poolList;\n  }\n\n  public async getWalletOperations({\n    since,\n    until,\n    ...query\n  }: {\n    since: Date;\n    until: Date;\n    walletAddress: string;\n    /**\n     * If true V2 pool operations will be present in the response.\n     *\n     * @default true\n     */\n    dexV2?: boolean;\n    opType?: OperationType;\n  }) {\n    return normalizeResponse(\n      await this.apiFetch<{ operations: OperationInfoResponse[] }>(\n        ...normalizeRequest(\"/v1/wallets/{walletAddress}/operations\", {\n          method: \"GET\",\n          query: {\n            ...query,\n            since: normalizeDate(since),\n            until: normalizeDate(until),\n          },\n        }),\n      ),\n    ).operations;\n  }\n\n  public async getOperations({ since, until }: { since: Date; until: Date }) {\n    return normalizeResponse(\n      await this.apiFetch<{ operations: OperationInfoResponse[] }>(\n        ...normalizeRequest(\"/v1/stats/operations\", {\n          method: \"GET\",\n          query: {\n            since: normalizeDate(since),\n            until: normalizeDate(until),\n          },\n        }),\n      ),\n    ).operations;\n  }\n\n  public async getRouters(query?: {\n    /**\n     * If true V2 routers will be present in the response.\n     *\n     * @default true\n     */\n    dexV2?: boolean;\n  }) {\n    return normalizeResponse(\n      await this.apiFetch<{ router_list: RouterInfoResponse[] }>(\n        ...normalizeRequest(\"/v1/routers\", {\n          method: \"GET\",\n          query,\n        }),\n      ),\n    ).routerList;\n  }\n\n  public async getRouter(routerAddress: string) {\n    return normalizeResponse(\n      await this.apiFetch<{ router: RouterInfoResponse }>(\n        ...normalizeRequest(\"/v1/routers/{routerAddress}\", {\n          method: \"GET\",\n          query: {\n            routerAddress,\n          },\n        }),\n      ),\n    ).router;\n  }\n}\n"],"mappings":"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","names":[]}