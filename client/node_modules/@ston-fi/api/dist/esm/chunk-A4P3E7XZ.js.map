{"version":3,"sources":["../../node_modules/.pnpm/map-obj@4.3.0/node_modules/map-obj/index.js","../../node_modules/.pnpm/decamelize-keys@2.0.1/node_modules/decamelize-keys/index.js","../../node_modules/.pnpm/decamelize@6.0.0/node_modules/decamelize/index.js","../../src/utils/decamelizeKeys.ts"],"sourcesContent":["'use strict';\n\nconst isObject = value => typeof value === 'object' && value !== null;\nconst mapObjectSkip = Symbol('skip');\n\n// Customized for this use-case\nconst isObjectCustom = value =>\n\tisObject(value) &&\n\t!(value instanceof RegExp) &&\n\t!(value instanceof Error) &&\n\t!(value instanceof Date);\n\nconst mapObject = (object, mapper, options, isSeen = new WeakMap()) => {\n\toptions = {\n\t\tdeep: false,\n\t\ttarget: {},\n\t\t...options\n\t};\n\n\tif (isSeen.has(object)) {\n\t\treturn isSeen.get(object);\n\t}\n\n\tisSeen.set(object, options.target);\n\n\tconst {target} = options;\n\tdelete options.target;\n\n\tconst mapArray = array => array.map(element => isObjectCustom(element) ? mapObject(element, mapper, options, isSeen) : element);\n\tif (Array.isArray(object)) {\n\t\treturn mapArray(object);\n\t}\n\n\tfor (const [key, value] of Object.entries(object)) {\n\t\tconst mapResult = mapper(key, value, object);\n\n\t\tif (mapResult === mapObjectSkip) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tlet [newKey, newValue, {shouldRecurse = true} = {}] = mapResult;\n\n\t\t// Drop `__proto__` keys.\n\t\tif (newKey === '__proto__') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (options.deep && shouldRecurse && isObjectCustom(newValue)) {\n\t\t\tnewValue = Array.isArray(newValue) ?\n\t\t\t\tmapArray(newValue) :\n\t\t\t\tmapObject(newValue, mapper, options, isSeen);\n\t\t}\n\n\t\ttarget[newKey] = newValue;\n\t}\n\n\treturn target;\n};\n\nmodule.exports = (object, mapper, options) => {\n\tif (!isObject(object)) {\n\t\tthrow new TypeError(`Expected an object, got \\`${object}\\` (${typeof object})`);\n\t}\n\n\treturn mapObject(object, mapper, options);\n};\n\nmodule.exports.mapObjectSkip = mapObjectSkip;\n","import mapObject from 'map-obj';\nimport QuickLru from 'quick-lru';\nimport decamelize from 'decamelize';\n\nconst has = (array, key) => array.some(element => {\n\tif (typeof element === 'string') {\n\t\treturn element === key;\n\t}\n\n\telement.lastIndex = 0;\n\n\treturn element.test(key);\n});\n\nconst cache = new QuickLru({maxSize: 100_000});\n\n// Reproduces behavior from `map-obj`.\nconst isObject = value =>\n\ttypeof value === 'object'\n\t\t&& value !== null\n\t\t&& !(value instanceof RegExp)\n\t\t&& !(value instanceof Error)\n\t\t&& !(value instanceof Date);\n\nconst transform = (input, options = {}) => {\n\tif (!isObject(input)) {\n\t\treturn input;\n\t}\n\n\tconst {\n\t\tseparator = '_',\n\t\texclude,\n\t\tdeep = false,\n\t} = options;\n\n\tconst makeMapper = parentPath => (key, value) => {\n\t\tif (deep && isObject(value)) {\n\t\t\tconst path = parentPath === undefined ? key : `${parentPath}.${key}`;\n\t\t\tvalue = mapObject(value, makeMapper(path));\n\t\t}\n\n\t\tif (!(exclude && has(exclude, key))) {\n\t\t\tconst cacheKey = `${separator}${key}`;\n\n\t\t\tif (cache.has(cacheKey)) {\n\t\t\t\tkey = cache.get(cacheKey);\n\t\t\t} else {\n\t\t\t\tconst returnValue = decamelize(key, {separator});\n\n\t\t\t\tif (key.length < 100) { // Prevent abuse\n\t\t\t\t\tcache.set(cacheKey, returnValue);\n\t\t\t\t}\n\n\t\t\t\tkey = returnValue;\n\t\t\t}\n\t\t}\n\n\t\treturn [key, value];\n\t};\n\n\treturn mapObject(input, makeMapper(undefined));\n};\n\nexport default function decamelizeKeys(input, options) {\n\tif (Array.isArray(input)) {\n\t\treturn Object.keys(input).map(key => transform(input[key], options));\n\t}\n\n\treturn transform(input, options);\n}\n","const handlePreserveConsecutiveUppercase = (decamelized, separator) => {\n\t// Lowercase all single uppercase characters. As we\n\t// want to preserve uppercase sequences, we cannot\n\t// simply lowercase the separated string at the end.\n\t// `data_For_USACounties` → `data_for_USACounties`\n\tdecamelized = decamelized.replace(\n\t\t/((?<![\\p{Uppercase_Letter}\\d])[\\p{Uppercase_Letter}\\d](?![\\p{Uppercase_Letter}\\d]))/gu,\n\t\t$0 => $0.toLowerCase(),\n\t);\n\n\t// Remaining uppercase sequences will be separated from lowercase sequences.\n\t// `data_For_USACounties` → `data_for_USA_counties`\n\treturn decamelized.replace(\n\t\t/(\\p{Uppercase_Letter}+)(\\p{Uppercase_Letter}\\p{Lowercase_Letter}+)/gu,\n\t\t(_, $1, $2) => $1 + separator + $2.toLowerCase(),\n\t);\n};\n\nexport default function decamelize(\n\ttext,\n\t{\n\t\tseparator = '_',\n\t\tpreserveConsecutiveUppercase = false,\n\t} = {},\n) {\n\tif (!(typeof text === 'string' && typeof separator === 'string')) {\n\t\tthrow new TypeError(\n\t\t\t'The `text` and `separator` arguments should be of type `string`',\n\t\t);\n\t}\n\n\t// Checking the second character is done later on. Therefore process shorter strings here.\n\tif (text.length < 2) {\n\t\treturn preserveConsecutiveUppercase ? text : text.toLowerCase();\n\t}\n\n\tconst replacement = `$1${separator}$2`;\n\n\t// Split lowercase sequences followed by uppercase character.\n\t// `dataForUSACounties` → `data_For_USACounties`\n\t// `myURLstring → `my_URLstring`\n\tconst decamelized = text.replace(\n\t\t/([\\p{Lowercase_Letter}\\d])(\\p{Uppercase_Letter})/gu,\n\t\treplacement,\n\t);\n\n\tif (preserveConsecutiveUppercase) {\n\t\treturn handlePreserveConsecutiveUppercase(decamelized, separator);\n\t}\n\n\t// Split multiple uppercase characters followed by one or more lowercase characters.\n\t// `my_URLstring` → `my_ur_lstring`\n\treturn decamelized\n\t\t.replace(\n\t\t\t/(\\p{Uppercase_Letter})(\\p{Uppercase_Letter}\\p{Lowercase_Letter}+)/gu,\n\t\t\treplacement,\n\t\t)\n\t\t.toLowerCase();\n}\n","import _decamelizeKeys from \"decamelize-keys\";\n\n/**\n * Transforms object keys from camel case to snake case.\n * Powered by [decamelize-keys](https://github.com/sindresorhus/decamelize-keys)\n *\n * @param obj Object with possible camel case keys.\n * @returns Object where all camel case keys are transformed to snake case.\n */\nexport function decamelizeKeys<T extends Record<string, unknown>>(val: T) {\n  return _decamelizeKeys(val, { deep: true });\n}\n"],"mappings":"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","names":["isObject","mapObject","mapObject","decamelizeKeys"]}