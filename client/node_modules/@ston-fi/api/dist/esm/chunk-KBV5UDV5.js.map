{"version":3,"sources":["../../src/client/mappers/normalizeRequest.ts"],"sourcesContent":["import type { FetchOptions } from \"ofetch\";\n\nimport { decamelizeKeys } from \"../../utils/decamelizeKeys\";\nimport { toUrlSafe } from \"../../utils/toUrlSafe\";\n\n/**\n * Apply following transformations to the fetch request:\n * - replace all non-URL-safe characters with their URL-safe counterparts in the path and query.\n * - deep transform all camelCase keys in the query to snake_case.\n */\nexport function normalizeRequest<T extends FetchOptions>(\n  path: string,\n  options?: T,\n) {\n  const pathWithParams = path.replace(/{([a-zA-Z0-9_]+)}/g, (_, key) => {\n    const value = options?.query?.[key];\n\n    if (!value) {\n      throw new Error(`Missing value for path parameter \"${key}\"`);\n    }\n\n    delete options?.query?.[key];\n\n    return toUrlSafe(value);\n  });\n\n  if (options?.query) {\n    for (const key in options.query) {\n      const value = options.query[key];\n\n      if (typeof value === \"string\") {\n        options.query[key] = toUrlSafe(value);\n      }\n    }\n\n    options.query = decamelizeKeys(options.query);\n  }\n\n  return [pathWithParams, options] as const;\n}\n"],"mappings":";;;;;;;;AAUO,SAAS,iBACd,MACA,SACA;AACA,QAAM,iBAAiB,KAAK,QAAQ,sBAAsB,CAAC,GAAG,QAAQ;AAdxE;AAeI,UAAM,SAAQ,wCAAS,UAAT,mBAAiB;AAE/B,QAAI,CAAC,OAAO;AACV,YAAM,IAAI,MAAM,qCAAqC,GAAG,GAAG;AAAA,IAC7D;AAEA,UAAO,mCAAS,UAAhB,wBAAwB;AAExB,WAAO,UAAU,KAAK;AAAA,EACxB,CAAC;AAED,MAAI,mCAAS,OAAO;AAClB,eAAW,OAAO,QAAQ,OAAO;AAC/B,YAAM,QAAQ,QAAQ,MAAM,GAAG;AAE/B,UAAI,OAAO,UAAU,UAAU;AAC7B,gBAAQ,MAAM,GAAG,IAAI,UAAU,KAAK;AAAA,MACtC;AAAA,IACF;AAEA,YAAQ,QAAQ,eAAe,QAAQ,KAAK;AAAA,EAC9C;AAEA,SAAO,CAAC,gBAAgB,OAAO;AACjC;","names":[]}