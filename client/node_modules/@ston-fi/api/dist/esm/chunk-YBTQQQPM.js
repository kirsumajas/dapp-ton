import {
  normalizeResponse
} from "./chunk-E7NKSECV.js";
import {
  normalizeDate
} from "./chunk-OG3WA5MF.js";
import {
  normalizeRequest
} from "./chunk-KBV5UDV5.js";
import {
  __async,
  __objRest,
  __spreadProps,
  __spreadValues
} from "./chunk-OAIRL2FN.js";

// src/client/apiClient.ts
import { ofetch } from "ofetch";
var StonApiClient = class {
  constructor(options) {
    var _a, _b;
    const baseUrl = new URL(
      (_b = (_a = options == null ? void 0 : options.baseURL) != null ? _a : options == null ? void 0 : options.baseUrl) != null ? _b : "https://api.ston.fi"
    );
    const baseQuery = [...new URLSearchParams(baseUrl.search)].reduce(
      // biome-ignore lint/performance/noAccumulatingSpread: it's ok here
      (acc, [key, value]) => __spreadProps(__spreadValues({}, acc), { [key]: value }),
      {}
    );
    this.apiFetch = ofetch.create({
      baseURL: `${baseUrl.origin}${baseUrl.pathname}`,
      query: baseQuery
    });
  }
  getAsset(assetAddress) {
    return __async(this, null, function* () {
      return normalizeResponse(
        yield this.apiFetch(
          ...normalizeRequest("/v1/assets/{assetAddress}", {
            method: "GET",
            query: { assetAddress }
          })
        )
      ).asset;
    });
  }
  getAssets() {
    return __async(this, null, function* () {
      return normalizeResponse(
        yield this.apiFetch(
          ...normalizeRequest("/v1/assets", {
            method: "GET"
          })
        )
      ).assetList;
    });
  }
  queryAssets(_a) {
    return __async(this, null, function* () {
      var _b = _a, {
        unconditionalAssets: unconditionalAsset
      } = _b, query = __objRest(_b, [
        "unconditionalAssets"
      ]);
      return normalizeResponse(
        yield this.apiFetch(
          ...normalizeRequest("/v1/assets/query", {
            method: "POST",
            query: __spreadProps(__spreadValues({}, query), {
              unconditionalAsset
            })
          })
        )
      ).assetList;
    });
  }
  searchAssets(_c) {
    return __async(this, null, function* () {
      var _d = _c, {
        unconditionalAssets: unconditionalAsset
      } = _d, query = __objRest(_d, [
        "unconditionalAssets"
      ]);
      return normalizeResponse(
        yield this.apiFetch(
          ...normalizeRequest("/v1/assets/search", {
            method: "POST",
            query: __spreadProps(__spreadValues({}, query), {
              unconditionalAsset
            })
          })
        )
      ).assetList;
    });
  }
  getFarm(farmAddress) {
    return __async(this, null, function* () {
      return normalizeResponse(
        yield this.apiFetch(
          ...normalizeRequest("/v1/farms/{farmAddress}", {
            method: "GET",
            query: { farmAddress }
          })
        )
      ).farm;
    });
  }
  getFarms(query) {
    return __async(this, null, function* () {
      return normalizeResponse(
        yield this.apiFetch(
          ...normalizeRequest("/v1/farms", {
            method: "GET",
            query
          })
        )
      ).farmList;
    });
  }
  getFarmsByPool(poolAddress) {
    return __async(this, null, function* () {
      return normalizeResponse(
        yield this.apiFetch(
          ...normalizeRequest("/v1/farms_by_pool/{poolAddress}", {
            method: "GET",
            query: { poolAddress }
          })
        )
      ).farmList;
    });
  }
  getSwapPairs(query) {
    return __async(this, null, function* () {
      return normalizeResponse(
        yield this.apiFetch(
          ...normalizeRequest("/v1/markets", {
            method: "GET",
            query
          })
        )
      ).pairs;
    });
  }
  getSwapStatus(query) {
    return __async(this, null, function* () {
      return normalizeResponse(
        yield this.apiFetch(
          ...normalizeRequest("/v1/swap/status", {
            method: "GET",
            query
          })
        )
      );
    });
  }
  getPool(data) {
    return __async(this, null, function* () {
      return normalizeResponse(
        yield this.apiFetch(
          ...normalizeRequest("/v1/pools/{poolAddress}", {
            method: "GET",
            query: typeof data === "string" ? { poolAddress: data } : data
          })
        )
      ).pool;
    });
  }
  getPools(query) {
    return __async(this, null, function* () {
      return normalizeResponse(
        yield this.apiFetch(
          ...normalizeRequest("/v1/pools", {
            method: "GET",
            query
          })
        )
      ).poolList;
    });
  }
  getPoolsByAssetPair(query) {
    return __async(this, null, function* () {
      return normalizeResponse(
        yield this.apiFetch(
          ...normalizeRequest(
            "/v1/pools/by_market/{asset0Address}/{asset1Address}",
            {
              method: "GET",
              query
            }
          )
        )
      ).poolList;
    });
  }
  queryPools(_e) {
    return __async(this, null, function* () {
      var _f = _e, {
        unconditionalAssets: unconditionalAsset
      } = _f, query = __objRest(_f, [
        "unconditionalAssets"
      ]);
      return normalizeResponse(
        yield this.apiFetch(
          ...normalizeRequest("/v1/pool/query", {
            method: "POST",
            query: __spreadProps(__spreadValues({}, query), {
              unconditionalAsset
            })
          })
        )
      ).poolList;
    });
  }
  simulateSwap(_g) {
    return __async(this, null, function* () {
      var _h = _g, {
        offerUnits: units
      } = _h, query = __objRest(_h, [
        "offerUnits"
      ]);
      return normalizeResponse(
        yield this.apiFetch(
          ...normalizeRequest("/v1/swap/simulate", {
            method: "POST",
            query: __spreadProps(__spreadValues({}, query), {
              units
            })
          })
        )
      );
    });
  }
  simulateReverseSwap(_i) {
    return __async(this, null, function* () {
      var _j = _i, {
        askUnits: units
      } = _j, query = __objRest(_j, [
        "askUnits"
      ]);
      return normalizeResponse(
        yield this.apiFetch(
          ...normalizeRequest("/v1/reverse_swap/simulate", {
            method: "POST",
            query: __spreadProps(__spreadValues({}, query), {
              units
            })
          })
        )
      );
    });
  }
  simulateLiquidityProvision(query) {
    return __async(this, null, function* () {
      return normalizeResponse(
        yield this.apiFetch(
          ...normalizeRequest("/v1/liquidity_provision/simulate", {
            method: "POST",
            query
          })
        )
      );
    });
  }
  getJettonWalletAddress(query) {
    return __async(this, null, function* () {
      return normalizeResponse(
        yield this.apiFetch(
          ...normalizeRequest("/v1/jetton/{jettonAddress}/address", {
            method: "GET",
            query
          })
        )
      ).address;
    });
  }
  getWalletAsset(query) {
    return __async(this, null, function* () {
      return normalizeResponse(
        yield this.apiFetch(
          ...normalizeRequest(
            "/v1/wallets/{walletAddress}/assets/{assetAddress}",
            {
              method: "GET",
              query
            }
          )
        )
      ).asset;
    });
  }
  getWalletAssets(walletAddress) {
    return __async(this, null, function* () {
      return normalizeResponse(
        yield this.apiFetch(
          ...normalizeRequest("/v1/wallets/{walletAddress}/assets", {
            method: "GET",
            query: { walletAddress }
          })
        )
      ).assetList;
    });
  }
  getWalletFarm(query) {
    return __async(this, null, function* () {
      return normalizeResponse(
        yield this.apiFetch(
          ...normalizeRequest("/v1/wallets/{walletAddress}/farms/{farmAddress}", {
            method: "GET",
            query
          })
        )
      ).farm;
    });
  }
  getWalletFarms(data) {
    return __async(this, null, function* () {
      return normalizeResponse(
        yield this.apiFetch(
          ...normalizeRequest("/v1/wallets/{walletAddress}/farms", {
            method: "GET",
            query: typeof data === "string" ? { walletAddress: data } : data
          })
        )
      ).farmList;
    });
  }
  getWalletPool(query) {
    return __async(this, null, function* () {
      return normalizeResponse(
        yield this.apiFetch(
          ...normalizeRequest("/v1/wallets/{walletAddress}/pools/{poolAddress}", {
            method: "GET",
            query
          })
        )
      ).pool;
    });
  }
  getWalletPools(data) {
    return __async(this, null, function* () {
      return normalizeResponse(
        yield this.apiFetch(
          ...normalizeRequest("/v1/wallets/{walletAddress}/pools", {
            method: "GET",
            query: typeof data === "string" ? { walletAddress: data } : data
          })
        )
      ).poolList;
    });
  }
  getWalletOperations(_k) {
    return __async(this, null, function* () {
      var _l = _k, {
        since,
        until
      } = _l, query = __objRest(_l, [
        "since",
        "until"
      ]);
      return normalizeResponse(
        yield this.apiFetch(
          ...normalizeRequest("/v1/wallets/{walletAddress}/operations", {
            method: "GET",
            query: __spreadProps(__spreadValues({}, query), {
              since: normalizeDate(since),
              until: normalizeDate(until)
            })
          })
        )
      ).operations;
    });
  }
  getOperations(_0) {
    return __async(this, arguments, function* ({ since, until }) {
      return normalizeResponse(
        yield this.apiFetch(
          ...normalizeRequest("/v1/stats/operations", {
            method: "GET",
            query: {
              since: normalizeDate(since),
              until: normalizeDate(until)
            }
          })
        )
      ).operations;
    });
  }
  getRouters(query) {
    return __async(this, null, function* () {
      return normalizeResponse(
        yield this.apiFetch(
          ...normalizeRequest("/v1/routers", {
            method: "GET",
            query
          })
        )
      ).routerList;
    });
  }
  getRouter(routerAddress) {
    return __async(this, null, function* () {
      return normalizeResponse(
        yield this.apiFetch(
          ...normalizeRequest("/v1/routers/{routerAddress}", {
            method: "GET",
            query: {
              routerAddress
            }
          })
        )
      ).router;
    });
  }
};

export {
  StonApiClient
};
//# sourceMappingURL=chunk-YBTQQQPM.js.map