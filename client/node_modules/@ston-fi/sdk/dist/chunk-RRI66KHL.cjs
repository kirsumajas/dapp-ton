"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _nullishCoalesce(lhs, rhsFn) { if (lhs != null) { return lhs; } else { return rhsFn(); } } function _optionalChain(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; } var _class;

var _chunkV23FVL4Pcjs = require('./chunk-V23FVL4P.cjs');


var _chunkXFAO7SVDcjs = require('./chunk-XFAO7SVD.cjs');


var _chunkI4SOZEKKcjs = require('./chunk-I4SOZEKK.cjs');


var _chunkQBYZPWDOcjs = require('./chunk-QBYZPWDO.cjs');

// src/contracts/pTON/v2_1/PtonV2_1.ts



var _ton = require('@ton/ton');
var PtonV2_1 = (_class = class _PtonV2_1 extends _chunkXFAO7SVDcjs.PtonV1 {
  static __initStatic() {this.version = _chunkI4SOZEKKcjs.pTON_VERSION.v2_1}
  static __initStatic2() {this.gasConstants = {
    tonTransfer: _ton.toNano.call(void 0, "0.01"),
    deployWallet: _ton.toNano.call(void 0, "0.1")
  }}
  __init() {this.version = _PtonV2_1.version}
  
  constructor(address, { gasConstants, ...options } = {}) {
    super(address, options);_class.prototype.__init.call(this);;
    this.gasConstants = {
      ..._PtonV2_1.gasConstants,
      ...gasConstants
    };
  }
  async createTonTransferBody(params) {
    const builder = _ton.beginCell.call(void 0, );
    builder.storeUint(_chunkV23FVL4Pcjs.pTON_OP_CODES.TON_TRANSFER, 32);
    builder.storeUint(_nullishCoalesce(params.queryId, () => ( 0)), 64);
    builder.storeCoins(BigInt(params.tonAmount));
    builder.storeAddress(_chunkQBYZPWDOcjs.toAddress.call(void 0, params.refundAddress));
    if (params.forwardPayload) {
      builder.storeBit(true);
      builder.storeRef(params.forwardPayload);
    }
    return builder.endCell();
  }
  async getTonTransferTxParams(provider, params) {
    const to = await this.getWalletAddress(provider, params.destinationAddress);
    const body = await this.createTonTransferBody({
      tonAmount: params.tonAmount,
      refundAddress: params.refundAddress,
      forwardPayload: params.forwardPayload,
      queryId: params.queryId
    });
    const value = BigInt(params.tonAmount) + BigInt(_nullishCoalesce(params.forwardTonAmount, () => ( 0))) + BigInt(this.gasConstants.tonTransfer);
    return { to, value, body };
  }
  async sendTonTransfer(provider, via, params) {
    const txParams = await this.getTonTransferTxParams(provider, params);
    return via.send(txParams);
  }
  async createDeployWalletBody(params) {
    return _ton.beginCell.call(void 0, ).storeUint(_chunkV23FVL4Pcjs.pTON_OP_CODES.DEPLOY_WALLET, 32).storeUint(_nullishCoalesce(params.queryId, () => ( 0)), 64).storeAddress(_chunkQBYZPWDOcjs.toAddress.call(void 0, params.ownerAddress)).storeAddress(_chunkQBYZPWDOcjs.toAddress.call(void 0, params.excessAddress)).endCell();
  }
  async getDeployWalletTxParams(provider, params) {
    const to = this.address;
    const body = await this.createDeployWalletBody({
      ownerAddress: params.ownerAddress,
      excessAddress: params.excessAddress,
      queryId: _optionalChain([params, 'optionalAccess', _ => _.queryId])
    });
    const value = BigInt(_nullishCoalesce(_optionalChain([params, 'optionalAccess', _2 => _2.gasAmount]), () => ( this.gasConstants.deployWallet)));
    return { to, value, body };
  }
  async sendDeployWallet(provider, via, params) {
    const txParams = await this.getDeployWalletTxParams(provider, params);
    return via.send(txParams);
  }
}, _class.__initStatic(), _class.__initStatic2(), _class);



exports.PtonV2_1 = PtonV2_1;
//# sourceMappingURL=chunk-RRI66KHL.cjs.map