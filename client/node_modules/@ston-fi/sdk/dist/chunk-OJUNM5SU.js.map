{"version":3,"sources":["../src/contracts/farm/v3/FarmNftItemV3.ts"],"sourcesContent":["import {\n  type Cell,\n  type ContractProvider,\n  Dictionary,\n  type Sender,\n  type SenderArguments,\n  beginCell,\n  toNano,\n} from \"@ton/ton\";\n\nimport type { AddressType, QueryIdType } from \"../../../types\";\nimport { createSbtDestroyMessage } from \"../../../utils/createSbtDestroyMessage\";\nimport { Contract, type ContractOptions } from \"../../core/Contract\";\nimport { FARM_OP_CODES, FARM_VERSION } from \"../constants\";\nimport { FarmNftMinterV3 } from \"./FarmNftMinterV3\";\n\nexport interface FarmNftItemV3Options extends ContractOptions {\n  gasConstants?: Partial<typeof FarmNftItemV3.gasConstants>;\n}\n\nexport class FarmNftItemV3 extends Contract {\n  public static readonly version = FARM_VERSION.v3;\n\n  public static readonly gasConstants = {\n    claimRewardsBase: toNano(\"0.35\"),\n    claimRewardsPerPool: toNano(\"0.13\"),\n    unstakeBase: toNano(\"0.45\"),\n    unstakePerPool: toNano(\"0.13\"),\n    destroy: toNano(\"0.05\"),\n  };\n\n  public readonly gasConstants;\n\n  constructor(\n    address: AddressType,\n    { gasConstants, ...options }: FarmNftItemV3Options = {},\n  ) {\n    super(address, options);\n\n    this.gasConstants = {\n      ...FarmNftItemV3.gasConstants,\n      ...gasConstants,\n    };\n  }\n\n  public async createClaimRewardsBody(\n    params: {\n      queryId?: QueryIdType;\n    } & (\n      | {\n          claimAll: true;\n        }\n      | {\n          claimAll: false;\n          poolIndex: number;\n        }\n    ),\n  ): Promise<Cell> {\n    const builder = beginCell();\n\n    builder.storeUint(FARM_OP_CODES.CLAIM_REWARDS, 32);\n    builder.storeUint(params.queryId ?? 0, 64);\n\n    if (params.claimAll) {\n      builder.storeUint(1, 1);\n      builder.storeUint(0, 8);\n    } else {\n      builder.storeUint(0, 1);\n      builder.storeUint(params.poolIndex, 8);\n    }\n\n    return builder.endCell();\n  }\n\n  /**\n   * Build all data required to execute a `claim_rewards` transaction.\n   *\n   * @param {number | undefined} params.poolCount - Optional; Number of deployed farm reward pools; If undefined value will get onchain\n   * @param {number | undefined} params.poolIndex - Optional; farm reward pool index used for claiming; If undefined claim rewards from all pools\n   * @param {bigint | number | undefined} params.queryId - Optional; query id\n   *\n   * @returns {SenderArguments} all data required to execute a `claim_rewards` transaction.\n   */\n  public async getClaimRewardsTxParams(\n    provider: ContractProvider,\n    params?: {\n      poolCount?: number;\n      queryId?: QueryIdType;\n      poolIndex?: number;\n    },\n  ): Promise<SenderArguments> {\n    const to = this.address;\n\n    const body = await this.createClaimRewardsBody({\n      queryId: params?.queryId,\n      claimAll: params?.poolIndex === undefined,\n      poolIndex: params?.poolIndex ?? 0,\n    });\n\n    const poolCount = params?.poolCount ?? (await this.getPoolCount(provider));\n\n    const value =\n      this.gasConstants.claimRewardsBase +\n      this.gasConstants.claimRewardsPerPool * BigInt(poolCount - 1);\n\n    return { to, value, body };\n  }\n\n  public async sendClaimRewards(\n    provider: ContractProvider,\n    via: Sender,\n    params: Parameters<FarmNftItemV3[\"getClaimRewardsTxParams\"]>[1],\n  ) {\n    const txParams = await this.getClaimRewardsTxParams(provider, params);\n\n    return via.send(txParams);\n  }\n\n  public async createUnstakeBody(params?: {\n    queryId?: QueryIdType;\n  }): Promise<Cell> {\n    return beginCell()\n      .storeUint(FARM_OP_CODES.UNSTAKE, 32)\n      .storeUint(params?.queryId ?? 0, 64)\n      .endCell();\n  }\n\n  /**\n   * Build all data required to execute a `unstake` transaction.\n   *\n   * @param {number | undefined} params.poolCount -  Optional; Number of deployed farm reward pools; If undefined value will get onchain\n   * @param {bigint | number | undefined} params.queryId - Optional; query id\n   *\n   * @returns {SenderArguments} all data required to execute a `unstake` transaction.\n   */\n  public async getUnstakeTxParams(\n    provider: ContractProvider,\n    params?: {\n      poolCount?: number;\n      queryId?: QueryIdType;\n    },\n  ): Promise<SenderArguments> {\n    const to = this.address;\n\n    const body = await this.createUnstakeBody({\n      queryId: params?.queryId,\n    });\n\n    const poolCount = params?.poolCount ?? (await this.getPoolCount(provider));\n\n    const value =\n      this.gasConstants.unstakeBase +\n      this.gasConstants.unstakePerPool * BigInt(poolCount - 1);\n\n    return { to, value, body };\n  }\n\n  public async sendUnstake(\n    provider: ContractProvider,\n    via: Sender,\n    params: Parameters<FarmNftItemV3[\"getUnstakeTxParams\"]>[1],\n  ) {\n    const txParams = await this.getUnstakeTxParams(provider, params);\n\n    return via.send(txParams);\n  }\n\n  public async createDestroyBody(params?: {\n    queryId?: QueryIdType;\n  }): Promise<Cell> {\n    return createSbtDestroyMessage({\n      queryId: params?.queryId ?? 0,\n    });\n  }\n\n  /**\n   * Build all data required to execute a `destroy` transaction.\n   *\n   * @param {bigint | string | number | undefined} params.queryId - Optional; query id\n   *\n   * @returns {SenderArguments} all data required to execute a `destroy` transaction.\n   */\n  public async getDestroyTxParams(\n    provider: ContractProvider,\n    params?: {\n      queryId?: QueryIdType;\n    },\n  ): Promise<SenderArguments> {\n    const to = this.address;\n\n    const body = await this.createDestroyBody({\n      queryId: params?.queryId,\n    });\n\n    const value = this.gasConstants.destroy;\n\n    return { to, value, body };\n  }\n\n  public async sendDestroy(\n    provider: ContractProvider,\n    via: Sender,\n    params: Parameters<FarmNftItemV3[\"getDestroyTxParams\"]>[1],\n  ) {\n    const txParams = await this.getDestroyTxParams(provider, params);\n\n    return via.send(txParams);\n  }\n\n  /**\n   * @returns structure containing current state of the farm NFT\n   *\n   * @property {number} status Status of the contract: uninitialized (0), active (1), unstaked (2), claiming (3), unstaked_pending (4)\n   * @property {bigint} revokeTime Timestamp of unstake\n   * @property {bigint} stakedTokens Amount of staked tokens\n   * @property {bigint} stakeDate Timestamp in which the owner started staking\n   * @property {Map<number, bigint>} claimedPerUnit `accrued_per_unit_nanorewards amounts` for each pool at the time of last claim for this user\n   * @property {Address} ownerAddress Owner address of farm nft\n   */\n  public async getFarmingData(provider: ContractProvider) {\n    const result = await provider.get(\"get_farming_data\", []);\n\n    return {\n      status: result.stack.readNumber(),\n      revokeTime: result.stack.readBigNumber(),\n      stakedTokens: result.stack.readBigNumber(),\n      stakeDate: result.stack.readBigNumber(),\n      claimedPerUnit: (() => {\n        const dict = result.stack\n          .readCellOpt()\n          ?.asSlice()\n          .loadDictDirect(\n            Dictionary.Keys.Uint(8),\n            Dictionary.Values.BigUint(150),\n          );\n\n        const claimedPerUnit = new Map<number, bigint>();\n\n        if (dict) {\n          for (const poolIndex of dict.keys()) {\n            const accruedPerUnitNanorewards = dict.get(poolIndex);\n\n            if (accruedPerUnitNanorewards === undefined) {\n              throw new Error(\n                `Failed to parse claimedPerUnit from dict: ${dict}`,\n              );\n            }\n\n            claimedPerUnit.set(Number(poolIndex), accruedPerUnitNanorewards);\n          }\n        }\n\n        return claimedPerUnit;\n      })(),\n      ownerAddress: result.stack.readAddress(),\n    };\n  }\n\n  public async getPoolCount(provider: ContractProvider) {\n    const result = await provider.get(\"get_nft_data\", []);\n\n    const nftItemData = {\n      isInitialized: result.stack.readBoolean(),\n      index: result.stack.readNumber(),\n      minterAddress: result.stack.readAddress(),\n    };\n\n    const { poolCount } = await provider\n      .open(FarmNftMinterV3.create(nftItemData.minterAddress))\n      .getFarmingMinterData();\n\n    return poolCount;\n  }\n}\n"],"mappings":"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","names":[]}