{"version":3,"sources":["../src/contracts/dex/v2_2/router/WStableRouterV2_2.ts"],"sourcesContent":["import type { ContractProvider } from \"@ton/ton\";\n\nimport type { AddressType } from \"../../../../types\";\nimport { JettonMinter } from \"../../../core/JettonMinter\";\nimport { DEX_VERSION } from \"../../constants\";\nimport { WStableRouterV2_1 } from \"../../v2_1/router/WStableRouterV2_1\";\nimport { WStablePoolV2_2 } from \"../pool/WStablePoolV2_2\";\nimport { VaultV2_2 } from \"../vault/VaultV2_2\";\n\nexport class WStableRouterV2_2 extends WStableRouterV2_1 {\n  public static override readonly version: DEX_VERSION = DEX_VERSION.v2_2;\n\n  public override async getPool(\n    provider: ContractProvider,\n    params: {\n      token0: AddressType;\n      token1: AddressType;\n    },\n  ) {\n    const poolAddress = await this.getPoolAddressByJettonMinters(\n      provider,\n      params,\n    );\n\n    return WStablePoolV2_2.create(poolAddress);\n  }\n\n  public override async getVault(\n    provider: ContractProvider,\n    params: {\n      user: AddressType;\n      tokenMinter: AddressType;\n    },\n  ) {\n    const tokenMinter = provider.open(JettonMinter.create(params.tokenMinter));\n\n    const vaultAddress = await this.getVaultAddress(provider, {\n      user: params.user,\n      tokenWallet: await tokenMinter.getWalletAddress(this.address),\n    });\n\n    return VaultV2_2.create(vaultAddress);\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;AASO,IAAM,oBAAN,cAAgC,kBAAkB;AAAA,EACvD,OAAgC,UAAuB,YAAY;AAAA,EAEnE,MAAsB,QACpB,UACA,QAIA;AACA,UAAM,cAAc,MAAM,KAAK;AAAA,MAC7B;AAAA,MACA;AAAA,IACF;AAEA,WAAO,gBAAgB,OAAO,WAAW;AAAA,EAC3C;AAAA,EAEA,MAAsB,SACpB,UACA,QAIA;AACA,UAAM,cAAc,SAAS,KAAK,aAAa,OAAO,OAAO,WAAW,CAAC;AAEzE,UAAM,eAAe,MAAM,KAAK,gBAAgB,UAAU;AAAA,MACxD,MAAM,OAAO;AAAA,MACb,aAAa,MAAM,YAAY,iBAAiB,KAAK,OAAO;AAAA,IAC9D,CAAC;AAED,WAAO,UAAU,OAAO,YAAY;AAAA,EACtC;AACF;","names":[]}