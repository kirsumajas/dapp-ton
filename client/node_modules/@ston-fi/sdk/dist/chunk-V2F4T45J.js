import {
  DEX_OP_CODES
} from "./chunk-CWGXHOMU.js";
import {
  Contract
} from "./chunk-3QLJQGLC.js";
import {
  DEX_VERSION
} from "./chunk-4KVHWM75.js";

// src/contracts/dex/v2_1/vault/VaultV2_1.ts
import {
  beginCell,
  toNano
} from "@ton/ton";
var VaultV2_1 = class _VaultV2_1 extends Contract {
  static version = DEX_VERSION.v2_1;
  static gasConstants = {
    withdrawFee: toNano("0.3")
  };
  gasConstants;
  constructor(address, { gasConstants, ...options } = {}) {
    super(address, options);
    this.gasConstants = {
      ..._VaultV2_1.gasConstants,
      ...gasConstants
    };
  }
  async createWithdrawFeeBody(params) {
    return beginCell().storeUint(DEX_OP_CODES.WITHDRAW_FEE, 32).storeUint(params?.queryId ?? 0, 64).endCell();
  }
  /**
   * Build all data required to execute a `withdraw_fee` transaction.
   *
   * @param {ContractProvider} provider - {@link ContractProvider} instance
   *
   * @param {object | undefined} params - Optional tx params
   * @param {bigint | number | string | undefined} params.gasAmount - Optional; Custom transaction gas amount (in nanoTons)
   * @param {bigint | number | undefined} params.queryId - Optional; query id
   *
   *
   * @returns {SenderArguments} all data required to execute a `withdraw_fee` transaction.
   */
  async getWithdrawFeeTxParams(provider, params) {
    const to = this.address;
    const body = await this.createWithdrawFeeBody({
      queryId: params?.queryId
    });
    const value = BigInt(params?.gasAmount ?? this.gasConstants.withdrawFee);
    return { to, body, value };
  }
  async sendWithdrawFee(provider, via, params) {
    const txParams = await this.getWithdrawFeeTxParams(provider, params);
    return via.send(txParams);
  }
  /**
   * Get the current state of the vault contract.
   *
   * @param {ContractProvider} provider - {@link ContractProvider} instance
   *
   *
   * @returns {Promise<object>} structure containing the current state of the vault contract.
   */
  async getVaultData(provider) {
    const result = await provider.get("get_vault_data", []);
    return {
      ownerAddress: result.stack.readAddress(),
      tokenAddress: result.stack.readAddress(),
      routerAddress: result.stack.readAddress(),
      depositedAmount: result.stack.readBigNumber()
    };
  }
};

export {
  VaultV2_1
};
//# sourceMappingURL=chunk-V2F4T45J.js.map