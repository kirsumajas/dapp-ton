{"version":3,"sources":["../src/contracts/dex/v2_1/vault/VaultV2_1.ts"],"sourcesContent":["import {\n  type Cell,\n  type ContractProvider,\n  type Sender,\n  type SenderArguments,\n  beginCell,\n  toNano,\n} from \"@ton/ton\";\n\nimport type { AddressType, AmountType, QueryIdType } from \"../../../../types\";\nimport { Contract, type ContractOptions } from \"../../../core/Contract\";\nimport { DEX_VERSION } from \"../../constants\";\nimport { DEX_OP_CODES } from \"../constants\";\n\nexport interface VaultV2_1Options extends ContractOptions {\n  gasConstants?: Partial<typeof VaultV2_1.gasConstants>;\n}\n\n/**\n * Token vault stores referral fees on a separate contract similar to an LP account.\n * This will allow us to decrease TX fees for swaps since users won't have to pay for additional Jetton transfer TX.\n *\n * Vault address is defined by router_address, owner_address and router_token_Wallet_address,\n * so, for each token, each user can have a dedicated vault contract.\n */\nexport class VaultV2_1 extends Contract {\n  public static readonly version: DEX_VERSION = DEX_VERSION.v2_1;\n\n  public static readonly gasConstants = {\n    withdrawFee: toNano(\"0.3\"),\n  };\n\n  public readonly gasConstants;\n\n  constructor(\n    address: AddressType,\n    { gasConstants, ...options }: VaultV2_1Options = {},\n  ) {\n    super(address, options);\n\n    this.gasConstants = {\n      ...VaultV2_1.gasConstants,\n      ...gasConstants,\n    };\n  }\n\n  public async createWithdrawFeeBody(params?: {\n    queryId?: QueryIdType;\n  }): Promise<Cell> {\n    return beginCell()\n      .storeUint(DEX_OP_CODES.WITHDRAW_FEE, 32)\n      .storeUint(params?.queryId ?? 0, 64)\n      .endCell();\n  }\n\n  /**\n   * Build all data required to execute a `withdraw_fee` transaction.\n   *\n   * @param {ContractProvider} provider - {@link ContractProvider} instance\n   *\n   * @param {object | undefined} params - Optional tx params\n   * @param {bigint | number | string | undefined} params.gasAmount - Optional; Custom transaction gas amount (in nanoTons)\n   * @param {bigint | number | undefined} params.queryId - Optional; query id\n   *\n   *\n   * @returns {SenderArguments} all data required to execute a `withdraw_fee` transaction.\n   */\n  public async getWithdrawFeeTxParams(\n    provider: ContractProvider,\n    params?: {\n      gasAmount?: AmountType;\n      queryId?: QueryIdType;\n    },\n  ): Promise<SenderArguments> {\n    const to = this.address;\n\n    const body = await this.createWithdrawFeeBody({\n      queryId: params?.queryId,\n    });\n\n    const value = BigInt(params?.gasAmount ?? this.gasConstants.withdrawFee);\n\n    return { to, body, value };\n  }\n\n  public async sendWithdrawFee(\n    provider: ContractProvider,\n    via: Sender,\n    params: Parameters<VaultV2_1[\"getWithdrawFeeTxParams\"]>[1],\n  ) {\n    const txParams = await this.getWithdrawFeeTxParams(provider, params);\n\n    return via.send(txParams);\n  }\n\n  /**\n   * Get the current state of the vault contract.\n   *\n   * @param {ContractProvider} provider - {@link ContractProvider} instance\n   *\n   *\n   * @returns {Promise<object>} structure containing the current state of the vault contract.\n   */\n  public async getVaultData(provider: ContractProvider) {\n    const result = await provider.get(\"get_vault_data\", []);\n\n    return {\n      ownerAddress: result.stack.readAddress(),\n      tokenAddress: result.stack.readAddress(),\n      routerAddress: result.stack.readAddress(),\n      depositedAmount: result.stack.readBigNumber(),\n    };\n  }\n}\n"],"mappings":";;;;;;;;;;;AAAA;AAAA,EAKE;AAAA,EACA;AAAA,OACK;AAkBA,IAAM,YAAN,MAAM,mBAAkB,SAAS;AAAA,EACtC,OAAuB,UAAuB,YAAY;AAAA,EAE1D,OAAuB,eAAe;AAAA,IACpC,aAAa,OAAO,KAAK;AAAA,EAC3B;AAAA,EAEgB;AAAA,EAEhB,YACE,SACA,EAAE,cAAc,GAAG,QAAQ,IAAsB,CAAC,GAClD;AACA,UAAM,SAAS,OAAO;AAEtB,SAAK,eAAe;AAAA,MAClB,GAAG,WAAU;AAAA,MACb,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EAEA,MAAa,sBAAsB,QAEjB;AAChB,WAAO,UAAU,EACd,UAAU,aAAa,cAAc,EAAE,EACvC,UAAU,QAAQ,WAAW,GAAG,EAAE,EAClC,QAAQ;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,MAAa,uBACX,UACA,QAI0B;AAC1B,UAAM,KAAK,KAAK;AAEhB,UAAM,OAAO,MAAM,KAAK,sBAAsB;AAAA,MAC5C,SAAS,QAAQ;AAAA,IACnB,CAAC;AAED,UAAM,QAAQ,OAAO,QAAQ,aAAa,KAAK,aAAa,WAAW;AAEvE,WAAO,EAAE,IAAI,MAAM,MAAM;AAAA,EAC3B;AAAA,EAEA,MAAa,gBACX,UACA,KACA,QACA;AACA,UAAM,WAAW,MAAM,KAAK,uBAAuB,UAAU,MAAM;AAEnE,WAAO,IAAI,KAAK,QAAQ;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAa,aAAa,UAA4B;AACpD,UAAM,SAAS,MAAM,SAAS,IAAI,kBAAkB,CAAC,CAAC;AAEtD,WAAO;AAAA,MACL,cAAc,OAAO,MAAM,YAAY;AAAA,MACvC,cAAc,OAAO,MAAM,YAAY;AAAA,MACvC,eAAe,OAAO,MAAM,YAAY;AAAA,MACxC,iBAAiB,OAAO,MAAM,cAAc;AAAA,IAC9C;AAAA,EACF;AACF;","names":[]}