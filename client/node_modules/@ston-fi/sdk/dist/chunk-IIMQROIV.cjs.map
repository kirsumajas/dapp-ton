{"version":3,"sources":["/Users/paul-n/git/ston-fi/public/sdk-contracts/packages/sdk/dist/chunk-IIMQROIV.cjs","../src/contracts/core/Contract.ts"],"names":[],"mappings":"AAAA;AACE;AACF,wDAA6B;AAC7B;AACA;ACIO,IAAe,SAAA,EAAf,MAAqD;AAAA,EAC1C;AAAA,EAEhB,WAAA,CAAY,OAAA,EAAsB,OAAA,EAA2B;AAC3D,IAAA,IAAA,CAAK,QAAA,EAAU,yCAAA,OAAiB,CAAA;AAAA,EAClC;AAAA,EAEA,OAAc,MAAA,CAKH,OAAA,EAAsB;AAE/B,IAAA,OAAO,IAAI,IAAA,CAAK,OAAO,CAAA;AAAA,EACzB;AACF,CAAA;ADVA;AACA;AACE;AACF,4BAAC","file":"/Users/paul-n/git/ston-fi/public/sdk-contracts/packages/sdk/dist/chunk-IIMQROIV.cjs","sourcesContent":[null,"import type { Address, Contract as ContractInterface } from \"@ton/ton\";\n\nimport type { AddressType } from \"../../types\";\nimport { toAddress } from \"../../utils/toAddress\";\n\n// biome-ignore lint/suspicious/noEmptyInterface: it is empty for base class but may be extended in derived classes\nexport interface ContractOptions {}\n\nexport abstract class Contract implements ContractInterface {\n  public readonly address: Address;\n\n  constructor(address: AddressType, options?: ContractOptions) {\n    this.address = toAddress(address);\n  }\n\n  public static create<\n    T extends Contract,\n    C extends new (\n      address: AddressType,\n    ) => T,\n  >(this: C, address: AddressType) {\n    // biome-ignore lint/complexity/noThisInStatic: this here is a derived class\n    return new this(address) as InstanceType<C>;\n  }\n}\n"]}