{"version":3,"sources":["../src/contracts/dex/v2_1/router/BaseRouterV2_1.ts"],"sourcesContent":["import {\n  Address,\n  type Cell,\n  type ContractProvider,\n  type Sender,\n  type SenderArguments,\n  beginCell,\n  toNano,\n} from \"@ton/ton\";\n\nimport type { AddressType, AmountType, QueryIdType } from \"../../../../types\";\nimport { createJettonTransferMessage } from \"../../../../utils/createJettonTransferMessage\";\nimport { toAddress } from \"../../../../utils/toAddress\";\nimport { Contract, type ContractOptions } from \"../../../core/Contract\";\nimport { JettonMinter } from \"../../../core/JettonMinter\";\nimport { HOLE_ADDRESS } from \"../../../core/constants\";\nimport { pTON_VERSION } from \"../../../pTON\";\nimport type { AbstractPton } from \"../../../pTON/AbstractPton\";\nimport { type DEX_TYPE, DEX_VERSION } from \"../../constants\";\nimport * as Errors from \"../../errors\";\nimport { ROUTER_ADDRESS as ROUTER_v1_ADDRESS } from \"../../v1/constants\";\nimport { DEX_OP_CODES, TX_DEADLINE } from \"../constants\";\nimport { BasePoolV2_1 } from \"../pool/BasePoolV2_1\";\nimport { VaultV2_1 } from \"../vault/VaultV2_1\";\n\nexport interface BaseRouterV2_1Options extends ContractOptions {\n  gasConstants?: Partial<typeof BaseRouterV2_1.gasConstants>;\n  txDeadline?: number;\n}\n\nexport class BaseRouterV2_1 extends Contract {\n  public static readonly version: DEX_VERSION = DEX_VERSION.v2_1;\n\n  public static readonly gasConstants = {\n    swapJettonToJetton: {\n      gasAmount: toNano(\"0.3\"),\n      forwardGasAmount: toNano(\"0.24\"),\n    },\n    swapJettonToTon: {\n      gasAmount: toNano(\"0.3\"),\n      forwardGasAmount: toNano(\"0.24\"),\n    },\n    swapTonToJetton: {\n      forwardGasAmount: toNano(\"0.3\"),\n    },\n    provideLpJetton: {\n      gasAmount: toNano(\"0.3\"),\n      forwardGasAmount: toNano(\"0.235\"),\n    },\n    provideLpTon: {\n      forwardGasAmount: toNano(\"0.3\"),\n    },\n    singleSideProvideLpJetton: {\n      gasAmount: toNano(\"1\"),\n      forwardGasAmount: toNano(\"0.8\"),\n    },\n    singleSideProvideLpTon: {\n      forwardGasAmount: toNano(\"0.8\"),\n    },\n  };\n\n  public readonly gasConstants;\n  private readonly txDeadline;\n\n  constructor(\n    address: AddressType,\n    { gasConstants, txDeadline, ...options }: BaseRouterV2_1Options = {},\n  ) {\n    super(address, options);\n\n    if (this.address.equals(Address.parse(ROUTER_v1_ADDRESS))) {\n      throw Error(\n        [\n          \"You are trying to create an instance v2.1 Router with a v1 address\",\n          \"Please use the appropriate class for the v1 Router. Otherwise, all the funds will be permanently lost.\",\n        ].join(\"\\n\"),\n      );\n    }\n\n    this.gasConstants = {\n      ...BaseRouterV2_1.gasConstants,\n      ...gasConstants,\n    };\n    this.txDeadline = txDeadline ?? TX_DEADLINE;\n  }\n\n  public async createSwapBody(params: {\n    askJettonWalletAddress: AddressType;\n    receiverAddress: AddressType;\n    minAskAmount: AmountType;\n    refundAddress: AddressType;\n    excessesAddress?: AddressType;\n    dexCustomPayload?: Cell;\n    dexCustomPayloadForwardGasAmount?: AmountType;\n    refundPayload?: Cell;\n    refundForwardGasAmount?: AmountType;\n    referralAddress?: AddressType;\n    referralValue?: AmountType;\n    deadline?: number;\n  }): Promise<Cell> {\n    if (\n      params.referralValue &&\n      (BigInt(params.referralValue) < 0 || BigInt(params.referralValue) > 100)\n    ) {\n      throw Error(`'referralValue' should be in range [0, 100] BPS`);\n    }\n\n    return beginCell()\n      .storeUint(DEX_OP_CODES.SWAP, 32)\n      .storeAddress(toAddress(params.askJettonWalletAddress))\n      .storeAddress(toAddress(params.refundAddress))\n      .storeAddress(toAddress(params.excessesAddress ?? params.refundAddress))\n      .storeUint(params.deadline ?? this.defaultDeadline, 64)\n      .storeRef(\n        beginCell()\n          .storeCoins(BigInt(params.minAskAmount))\n          .storeAddress(toAddress(params.receiverAddress))\n          .storeCoins(BigInt(params.dexCustomPayloadForwardGasAmount ?? 0))\n          .storeMaybeRef(params.dexCustomPayload)\n          .storeCoins(BigInt(params.refundForwardGasAmount ?? 0))\n          .storeMaybeRef(params.refundPayload)\n          .storeUint(BigInt(params.referralValue ?? 10), 16)\n          .storeAddress(this.maybeReferralAddress(params.referralAddress))\n          .endCell(),\n      )\n      .endCell();\n  }\n\n  public async createCrossSwapBody(params: {\n    askJettonWalletAddress: AddressType;\n    receiverAddress: AddressType;\n    minAskAmount: AmountType;\n    refundAddress: AddressType;\n    excessesAddress?: AddressType;\n    dexCustomPayload?: Cell;\n    dexCustomPayloadForwardGasAmount?: AmountType;\n    refundPayload?: Cell;\n    refundForwardGasAmount?: AmountType;\n    referralAddress?: AddressType;\n    referralValue?: AmountType;\n    deadline?: number;\n  }): Promise<Cell> {\n    if (\n      params.referralValue &&\n      (BigInt(params.referralValue) < 0 || BigInt(params.referralValue) > 100)\n    ) {\n      throw Error(`'referralValue' should be in range [0, 100] BPS`);\n    }\n\n    return beginCell()\n      .storeUint(DEX_OP_CODES.CROSS_SWAP, 32)\n      .storeAddress(toAddress(params.askJettonWalletAddress))\n      .storeAddress(toAddress(params.refundAddress))\n      .storeAddress(toAddress(params.excessesAddress ?? params.refundAddress))\n      .storeUint(params.deadline ?? this.defaultDeadline, 64)\n      .storeRef(\n        beginCell()\n          .storeCoins(BigInt(params.minAskAmount))\n          .storeAddress(toAddress(params.receiverAddress))\n          .storeCoins(BigInt(params.dexCustomPayloadForwardGasAmount ?? 0))\n          .storeMaybeRef(params.dexCustomPayload)\n          .storeCoins(BigInt(params.refundForwardGasAmount ?? 0))\n          .storeMaybeRef(params.refundPayload)\n          .storeUint(BigInt(params.referralValue ?? 10), 16)\n          .storeAddress(this.maybeReferralAddress(params.referralAddress))\n          .endCell(),\n      )\n      .endCell();\n  }\n\n  public async getSwapJettonToJettonTxParams(\n    provider: ContractProvider,\n    params: {\n      userWalletAddress: AddressType;\n      receiverAddress?: AddressType;\n      offerJettonAddress: AddressType;\n      askJettonAddress: AddressType;\n      offerAmount: AmountType;\n      minAskAmount: AmountType;\n      refundAddress?: AddressType;\n      excessesAddress?: AddressType;\n      referralAddress?: AddressType;\n      referralValue?: AmountType;\n      dexCustomPayload?: Cell;\n      dexCustomPayloadForwardGasAmount?: AmountType;\n      refundPayload?: Cell;\n      refundForwardGasAmount?: AmountType;\n      deadline?: number;\n      gasAmount?: AmountType;\n      forwardGasAmount?: AmountType;\n      queryId?: QueryIdType;\n      jettonCustomPayload?: Cell;\n      transferExcessAddress?: AddressType;\n    },\n  ): Promise<SenderArguments> {\n    const contractAddress = this.address;\n\n    const [offerJettonWalletAddress, askJettonWalletAddress] =\n      await Promise.all([\n        provider\n          .open(JettonMinter.create(params.offerJettonAddress))\n          .getWalletAddress(params.userWalletAddress),\n        provider\n          .open(JettonMinter.create(params.askJettonAddress))\n          .getWalletAddress(contractAddress),\n      ]);\n\n    const forwardTonAmount = BigInt(\n      params.forwardGasAmount ??\n        this.gasConstants.swapJettonToJetton.forwardGasAmount,\n    );\n\n    const forwardPayload = await this.createSwapBody({\n      askJettonWalletAddress: askJettonWalletAddress,\n      receiverAddress: params.receiverAddress ?? params.userWalletAddress,\n      minAskAmount: params.minAskAmount,\n      refundAddress: params.refundAddress ?? params.userWalletAddress,\n      excessesAddress: params.excessesAddress,\n      referralAddress: params.referralAddress,\n      referralValue: params.referralValue,\n      dexCustomPayload: params.dexCustomPayload,\n      dexCustomPayloadForwardGasAmount: params.dexCustomPayloadForwardGasAmount,\n      refundPayload: params.refundPayload,\n      refundForwardGasAmount: params.refundForwardGasAmount,\n      deadline: params.deadline,\n    });\n\n    const body = createJettonTransferMessage({\n      queryId: params.queryId ?? 0,\n      amount: params.offerAmount,\n      destination: contractAddress,\n      responseDestination:\n        params.transferExcessAddress ?? params.userWalletAddress,\n      customPayload: params.jettonCustomPayload,\n      forwardTonAmount,\n      forwardPayload,\n    });\n\n    const value = BigInt(\n      params.gasAmount ?? this.gasConstants.swapJettonToJetton.gasAmount,\n    );\n\n    return {\n      to: offerJettonWalletAddress,\n      value,\n      body,\n    };\n  }\n\n  public async sendSwapJettonToJetton(\n    provider: ContractProvider,\n    via: Sender,\n    params: Parameters<BaseRouterV2_1[\"getSwapJettonToJettonTxParams\"]>[1],\n  ) {\n    const txParams = await this.getSwapJettonToJettonTxParams(provider, params);\n\n    return via.send(txParams);\n  }\n\n  public async getSwapJettonToTonTxParams(\n    provider: ContractProvider,\n    params: {\n      userWalletAddress: AddressType;\n      receiverAddress?: AddressType;\n      offerJettonAddress: AddressType;\n      proxyTon: AbstractPton;\n      offerAmount: AmountType;\n      minAskAmount: AmountType;\n      refundAddress?: AddressType;\n      excessesAddress?: AddressType;\n      referralAddress?: AddressType;\n      referralValue?: AmountType;\n      dexCustomPayload?: Cell;\n      dexCustomPayloadForwardGasAmount?: AmountType;\n      refundPayload?: Cell;\n      refundForwardGasAmount?: AmountType;\n      deadline?: number;\n      gasAmount?: AmountType;\n      forwardGasAmount?: AmountType;\n      queryId?: QueryIdType;\n      jettonCustomPayload?: Cell;\n      transferExcessAddress?: AddressType;\n    },\n  ): Promise<SenderArguments> {\n    this.assertProxyTon(params.proxyTon);\n\n    return await this.getSwapJettonToJettonTxParams(provider, {\n      ...params,\n      askJettonAddress: params.proxyTon.address,\n      gasAmount:\n        params.gasAmount ?? this.gasConstants.swapJettonToTon.gasAmount,\n      forwardGasAmount:\n        params.forwardGasAmount ??\n        this.gasConstants.swapJettonToTon.forwardGasAmount,\n    });\n  }\n\n  public async sendSwapJettonToTon(\n    provider: ContractProvider,\n    via: Sender,\n    params: Parameters<BaseRouterV2_1[\"getSwapJettonToTonTxParams\"]>[1],\n  ) {\n    const txParams = await this.getSwapJettonToTonTxParams(provider, params);\n\n    return via.send(txParams);\n  }\n\n  public async getSwapTonToJettonTxParams(\n    provider: ContractProvider,\n    params: {\n      userWalletAddress: AddressType;\n      receiverAddress?: AddressType;\n      proxyTon: AbstractPton;\n      askJettonAddress: AddressType;\n      offerAmount: AmountType;\n      minAskAmount: AmountType;\n      refundAddress?: AddressType;\n      excessesAddress?: AddressType;\n      referralAddress?: AddressType;\n      referralValue?: AmountType;\n      dexCustomPayload?: Cell;\n      dexCustomPayloadForwardGasAmount?: AmountType;\n      refundPayload?: Cell;\n      refundForwardGasAmount?: AmountType;\n      deadline?: number;\n      forwardGasAmount?: AmountType;\n      queryId?: QueryIdType;\n    },\n  ): Promise<SenderArguments> {\n    this.assertProxyTon(params.proxyTon);\n\n    const contractAddress = this.address;\n\n    const askJettonWalletAddress = await provider\n      .open(JettonMinter.create(params.askJettonAddress))\n      .getWalletAddress(contractAddress);\n\n    const forwardPayload = await this.createSwapBody({\n      askJettonWalletAddress: askJettonWalletAddress,\n      receiverAddress: params.receiverAddress ?? params.userWalletAddress,\n      minAskAmount: params.minAskAmount,\n      refundAddress: params.refundAddress ?? params.userWalletAddress,\n      excessesAddress: params.excessesAddress,\n      referralAddress: params.referralAddress,\n      referralValue: params.referralValue,\n      dexCustomPayload: params.dexCustomPayload,\n      dexCustomPayloadForwardGasAmount: params.dexCustomPayloadForwardGasAmount,\n      refundPayload: params.refundPayload,\n      refundForwardGasAmount: params.refundForwardGasAmount,\n      deadline: params.deadline,\n    });\n\n    const forwardTonAmount = BigInt(\n      params.forwardGasAmount ??\n        this.gasConstants.swapTonToJetton.forwardGasAmount,\n    );\n\n    return await provider.open(params.proxyTon).getTonTransferTxParams({\n      queryId: params.queryId ?? 0,\n      tonAmount: params.offerAmount,\n      destinationAddress: contractAddress,\n      refundAddress: params.userWalletAddress,\n      forwardPayload,\n      forwardTonAmount,\n    });\n  }\n\n  public async sendSwapTonToJetton(\n    provider: ContractProvider,\n    via: Sender,\n    params: Parameters<BaseRouterV2_1[\"getSwapTonToJettonTxParams\"]>[1],\n  ) {\n    const txParams = await this.getSwapTonToJettonTxParams(provider, params);\n\n    return via.send(txParams);\n  }\n\n  public async createProvideLiquidityBody(params: {\n    routerWalletAddress: AddressType;\n    minLpOut: AmountType;\n    receiverAddress: AddressType;\n    refundAddress: AddressType;\n    excessesAddress?: AddressType;\n    bothPositive: boolean;\n    dexCustomPayload?: Cell;\n    dexCustomPayloadForwardGasAmount?: AmountType;\n    deadline?: number;\n  }): Promise<Cell> {\n    return beginCell()\n      .storeUint(DEX_OP_CODES.PROVIDE_LP, 32)\n      .storeAddress(toAddress(params.routerWalletAddress))\n      .storeAddress(toAddress(params.refundAddress))\n      .storeAddress(toAddress(params.excessesAddress ?? params.refundAddress))\n      .storeUint(params.deadline ?? this.defaultDeadline, 64)\n      .storeRef(\n        beginCell()\n          .storeCoins(BigInt(params.minLpOut))\n          .storeAddress(toAddress(params.receiverAddress))\n          .storeUint(params.bothPositive ? 1 : 0, 1)\n          .storeCoins(BigInt(params.dexCustomPayloadForwardGasAmount ?? 0))\n          .storeMaybeRef(params.dexCustomPayload)\n          .endCell(),\n      )\n      .endCell();\n  }\n\n  public async getProvideLiquidityJettonTxParams(\n    provider: ContractProvider,\n    params: {\n      userWalletAddress: AddressType;\n      receiverAddress?: AddressType;\n      sendTokenAddress: AddressType;\n      otherTokenAddress: AddressType;\n      sendAmount: AmountType;\n      minLpOut: AmountType;\n      refundAddress?: AddressType;\n      excessesAddress?: AddressType;\n      dexCustomPayload?: Cell;\n      dexCustomPayloadForwardGasAmount?: AmountType;\n      deadline?: number;\n      gasAmount?: AmountType;\n      forwardGasAmount?: AmountType;\n      queryId?: QueryIdType;\n      jettonCustomPayload?: Cell;\n      transferExcessAddress?: AddressType;\n    },\n  ): Promise<SenderArguments> {\n    return this.implGetProvideLiquidityJettonTxParams(provider, {\n      ...params,\n      gasAmount:\n        params.gasAmount ?? this.gasConstants.provideLpJetton.gasAmount,\n      forwardGasAmount:\n        params.forwardGasAmount ??\n        this.gasConstants.provideLpJetton.forwardGasAmount,\n      bothPositive: true,\n    });\n  }\n\n  public async sendProvideLiquidityJetton(\n    provider: ContractProvider,\n    via: Sender,\n    params: Parameters<BaseRouterV2_1[\"getProvideLiquidityJettonTxParams\"]>[1],\n  ) {\n    const txParams = await this.getProvideLiquidityJettonTxParams(\n      provider,\n      params,\n    );\n\n    return via.send(txParams);\n  }\n\n  public async getSingleSideProvideLiquidityJettonTxParams(\n    provider: ContractProvider,\n    params: {\n      userWalletAddress: AddressType;\n      receiverAddress?: AddressType;\n      sendTokenAddress: AddressType;\n      otherTokenAddress: AddressType;\n      sendAmount: AmountType;\n      minLpOut: AmountType;\n      refundAddress?: AddressType;\n      excessesAddress?: AddressType;\n      dexCustomPayload?: Cell;\n      dexCustomPayloadForwardGasAmount?: AmountType;\n      deadline?: number;\n      gasAmount?: AmountType;\n      forwardGasAmount?: AmountType;\n      queryId?: QueryIdType;\n      jettonCustomPayload?: Cell;\n      transferExcessAddress?: AddressType;\n    },\n  ): Promise<SenderArguments> {\n    return this.implGetProvideLiquidityJettonTxParams(provider, {\n      ...params,\n      gasAmount:\n        params.gasAmount ??\n        this.gasConstants.singleSideProvideLpJetton.gasAmount,\n      forwardGasAmount:\n        params.forwardGasAmount ??\n        this.gasConstants.singleSideProvideLpJetton.forwardGasAmount,\n      bothPositive: false,\n    });\n  }\n\n  public async sendSingleSideProvideLiquidityJetton(\n    provider: ContractProvider,\n    via: Sender,\n    params: Parameters<\n      BaseRouterV2_1[\"getSingleSideProvideLiquidityJettonTxParams\"]\n    >[1],\n  ) {\n    const txParams = await this.getSingleSideProvideLiquidityJettonTxParams(\n      provider,\n      params,\n    );\n\n    return via.send(txParams);\n  }\n\n  protected async implGetProvideLiquidityJettonTxParams(\n    provider: ContractProvider,\n    params: Parameters<\n      BaseRouterV2_1[\"getProvideLiquidityJettonTxParams\"]\n    >[1] & {\n      gasAmount: AmountType;\n      forwardGasAmount: AmountType;\n      bothPositive: boolean;\n    },\n  ) {\n    const contractAddress = this.address;\n\n    const [jettonWalletAddress, routerWalletAddress] = await Promise.all([\n      provider\n        .open(JettonMinter.create(params.sendTokenAddress))\n        .getWalletAddress(params.userWalletAddress),\n      provider\n        .open(JettonMinter.create(params.otherTokenAddress))\n        .getWalletAddress(contractAddress),\n    ]);\n\n    const forwardPayload = await this.createProvideLiquidityBody({\n      routerWalletAddress: routerWalletAddress,\n      receiverAddress: params.receiverAddress ?? params.userWalletAddress,\n      minLpOut: params.minLpOut,\n      refundAddress: params.refundAddress ?? params.userWalletAddress,\n      excessesAddress: params.excessesAddress,\n      dexCustomPayload: params.dexCustomPayload,\n      dexCustomPayloadForwardGasAmount: params.dexCustomPayloadForwardGasAmount,\n      bothPositive: params.bothPositive,\n      deadline: params.deadline,\n    });\n\n    const forwardTonAmount = BigInt(params.forwardGasAmount);\n\n    const body = createJettonTransferMessage({\n      queryId: params.queryId ?? 0,\n      amount: params.sendAmount,\n      destination: contractAddress,\n      responseDestination:\n        params.transferExcessAddress ?? params.userWalletAddress,\n      customPayload: params.jettonCustomPayload,\n      forwardTonAmount,\n      forwardPayload,\n    });\n\n    const value = BigInt(params.gasAmount);\n\n    return {\n      to: jettonWalletAddress,\n      value,\n      body,\n    };\n  }\n\n  public async getProvideLiquidityTonTxParams(\n    provider: ContractProvider,\n    params: {\n      userWalletAddress: AddressType;\n      receiverAddress?: AddressType;\n      proxyTon: AbstractPton;\n      otherTokenAddress: AddressType;\n      sendAmount: AmountType;\n      minLpOut: AmountType;\n      refundAddress?: AddressType;\n      excessesAddress?: AddressType;\n      /* @deprecated: this field is internal and will be always true for this function. Could not be overridden from the outside and should be used. */\n      bothPositive?: boolean;\n      dexCustomPayload?: Cell;\n      dexCustomPayloadForwardGasAmount?: AmountType;\n      deadline?: number;\n      forwardGasAmount?: AmountType;\n      queryId?: QueryIdType;\n    },\n  ): Promise<SenderArguments> {\n    return this.implGetProvideLiquidityTonTxParams(provider, {\n      ...params,\n      forwardGasAmount:\n        params.forwardGasAmount ??\n        this.gasConstants.provideLpTon.forwardGasAmount,\n      bothPositive: true,\n    });\n  }\n\n  public async sendProvideLiquidityTon(\n    provider: ContractProvider,\n    via: Sender,\n    params: Parameters<BaseRouterV2_1[\"getProvideLiquidityTonTxParams\"]>[1],\n  ) {\n    const txParams = await this.getProvideLiquidityTonTxParams(\n      provider,\n      params,\n    );\n\n    return via.send(txParams);\n  }\n\n  public async getSingleSideProvideLiquidityTonTxParams(\n    provider: ContractProvider,\n    params: {\n      userWalletAddress: AddressType;\n      receiverAddress?: AddressType;\n      proxyTon: AbstractPton;\n      otherTokenAddress: AddressType;\n      sendAmount: AmountType;\n      minLpOut: AmountType;\n      refundAddress?: AddressType;\n      excessesAddress?: AddressType;\n      /* @deprecated: this field is internal and will be always false for this function. Could not be overridden from the outside and should be used. */\n      bothPositive?: boolean;\n      dexCustomPayload?: Cell;\n      dexCustomPayloadForwardGasAmount?: AmountType;\n      deadline?: number;\n      forwardGasAmount?: AmountType;\n      queryId?: QueryIdType;\n    },\n  ): Promise<SenderArguments> {\n    return this.implGetProvideLiquidityTonTxParams(provider, {\n      ...params,\n      forwardGasAmount:\n        params.forwardGasAmount ??\n        this.gasConstants.singleSideProvideLpTon.forwardGasAmount,\n      bothPositive: false,\n    });\n  }\n\n  public async sendSingleSideProvideLiquidityTon(\n    provider: ContractProvider,\n    via: Sender,\n    params: Parameters<\n      BaseRouterV2_1[\"getSingleSideProvideLiquidityTonTxParams\"]\n    >[1],\n  ) {\n    const txParams = await this.getSingleSideProvideLiquidityTonTxParams(\n      provider,\n      params,\n    );\n\n    return via.send(txParams);\n  }\n\n  protected async implGetProvideLiquidityTonTxParams(\n    provider: ContractProvider,\n    params: Parameters<BaseRouterV2_1[\"getProvideLiquidityTonTxParams\"]>[1] & {\n      forwardGasAmount: AmountType;\n      bothPositive: boolean;\n    },\n  ) {\n    this.assertProxyTon(params.proxyTon);\n\n    const contractAddress = this.address;\n\n    const routerWalletAddress = await provider\n      .open(JettonMinter.create(params.otherTokenAddress))\n      .getWalletAddress(contractAddress);\n\n    const forwardPayload = await this.createProvideLiquidityBody({\n      routerWalletAddress: routerWalletAddress,\n      receiverAddress: params.receiverAddress ?? params.userWalletAddress,\n      minLpOut: params.minLpOut,\n      refundAddress: params.refundAddress ?? params.userWalletAddress,\n      excessesAddress: params.excessesAddress,\n      dexCustomPayload: params.dexCustomPayload,\n      dexCustomPayloadForwardGasAmount: params.dexCustomPayloadForwardGasAmount,\n      bothPositive: params.bothPositive,\n      deadline: params.deadline,\n    });\n\n    const forwardTonAmount = BigInt(params.forwardGasAmount);\n\n    return await provider.open(params.proxyTon).getTonTransferTxParams({\n      queryId: params.queryId ?? 0,\n      tonAmount: params.sendAmount,\n      destinationAddress: contractAddress,\n      refundAddress: params.userWalletAddress,\n      forwardPayload,\n      forwardTonAmount,\n    });\n  }\n\n  private maybeReferralAddress(referralAddress: AddressType | undefined) {\n    if (!referralAddress) return null;\n\n    const referralAddressParsed = toAddress(referralAddress);\n\n    // ignore hole address as referral address\n    if (referralAddressParsed.equals(HOLE_ADDRESS)) return null;\n\n    return referralAddressParsed;\n  }\n\n  private get defaultDeadline() {\n    return Math.floor(Date.now() / 1000) + this.txDeadline;\n  }\n\n  private assertProxyTon(proxyTon: AbstractPton) {\n    if (proxyTon.version !== pTON_VERSION.v2_1) {\n      throw new Errors.UnmatchedPtonVersion({\n        expected: pTON_VERSION.v2_1,\n        received: proxyTon.version,\n      });\n    }\n  }\n\n  public async getPoolAddress(\n    provider: ContractProvider,\n    params: {\n      token0: AddressType;\n      token1: AddressType;\n    },\n  ) {\n    const result = await provider.get(\"get_pool_address\", [\n      {\n        type: \"slice\",\n        cell: beginCell().storeAddress(toAddress(params.token0)).endCell(),\n      },\n      {\n        type: \"slice\",\n        cell: beginCell().storeAddress(toAddress(params.token1)).endCell(),\n      },\n    ]);\n\n    return result.stack.readAddress();\n  }\n\n  public async getPoolAddressByJettonMinters(\n    provider: ContractProvider,\n    params: {\n      token0: AddressType;\n      token1: AddressType;\n    },\n  ) {\n    const [jetton0WalletAddress, jetton1WalletAddress] = await Promise.all([\n      provider\n        .open(JettonMinter.create(params.token0))\n        .getWalletAddress(this.address),\n      provider\n        .open(JettonMinter.create(params.token1))\n        .getWalletAddress(this.address),\n    ]);\n\n    const poolAddress = await this.getPoolAddress(provider, {\n      token0: jetton0WalletAddress,\n      token1: jetton1WalletAddress,\n    });\n\n    return poolAddress;\n  }\n\n  public async getPool(\n    provider: ContractProvider,\n    params: {\n      token0: AddressType;\n      token1: AddressType;\n    },\n  ) {\n    const poolAddress = await this.getPoolAddressByJettonMinters(\n      provider,\n      params,\n    );\n\n    return BasePoolV2_1.create(poolAddress);\n  }\n\n  public async getVaultAddress(\n    provider: ContractProvider,\n    params: {\n      user: AddressType;\n      tokenWallet: AddressType;\n    },\n  ) {\n    const result = await provider.get(\"get_vault_address\", [\n      {\n        type: \"slice\",\n        cell: beginCell().storeAddress(toAddress(params.user)).endCell(),\n      },\n      {\n        type: \"slice\",\n        cell: beginCell().storeAddress(toAddress(params.tokenWallet)).endCell(),\n      },\n    ]);\n\n    return result.stack.readAddress();\n  }\n\n  public async getVault(\n    provider: ContractProvider,\n    params: {\n      user: AddressType;\n      tokenMinter: AddressType;\n    },\n  ) {\n    const tokenMinter = provider.open(JettonMinter.create(params.tokenMinter));\n\n    const vaultAddress = await this.getVaultAddress(provider, {\n      user: params.user,\n      tokenWallet: await tokenMinter.getWalletAddress(this.address),\n    });\n\n    return VaultV2_1.create(vaultAddress);\n  }\n\n  public async getRouterVersion(provider: ContractProvider) {\n    const result = await provider.get(\"get_router_version\", []);\n\n    return {\n      major: result.stack.readNumber(),\n      minor: result.stack.readNumber(),\n      development: result.stack.readString(),\n    };\n  }\n\n  public async getRouterData(provider: ContractProvider) {\n    const result = await provider.get(\"get_router_data\", []);\n\n    return {\n      routerId: result.stack.readNumber(),\n      dexType: result.stack.readString() as DEX_TYPE,\n      isLocked: result.stack.readBoolean(),\n      adminAddress: result.stack.readAddress(),\n      tempUpgrade: result.stack.readCell(),\n      poolCode: result.stack.readCell(),\n      jettonLpWalletCode: result.stack.readCell(),\n      lpAccountCode: result.stack.readCell(),\n      vaultCode: result.stack.readCell(),\n    };\n  }\n}\n"],"mappings":"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","names":[]}