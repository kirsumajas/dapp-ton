{"version":3,"sources":["/Users/paul-n/git/ston-fi/public/sdk-contracts/packages/sdk/dist/chunk-4PZQD6XX.cjs","../src/client/Client.ts"],"names":[],"mappings":"AAAA;ACAA,mCAA8B;AAC9B,+BAA2D;AAEpD,IAAM,OAAA,EAAN,MAAA,QAAqB,eAAU;AAAA,EAC5B;AAAA,EAER,WAAA,CACE,OAAA,EAGA;AACA,IAAA,KAAA,CAAM,OAAO,CAAA;AAEb,IAAA,IAAA,CAAK,cAAA,mBAAgB,OAAA,CAAQ,aAAA,UAAiB,IAAI,uBAAA,CAAc,GAAA;AAAA,EAClE;AAAA,EAEA,MAAsB,aAAA,CAAA,GACjB,IAAA,EACH;AACA,IAAA,GAAA,CAAI,IAAA,CAAK,CAAC,EAAA,IAAM,qBAAA,mBAAwB,IAAA,mBAAK,CAAC,CAAA,4BAAA,CAAI,CAAC,CAAA,6BAAG,OAAA,IAAS,OAAA,EAAS;AACtE,MAAA,IAAI;AACF,QAAA,MAAM,oBAAA,EACJ,MAAM,IAAA,CAAK,aAAA,CAAc,sBAAA,CAAuB;AAAA,UAC9C,aAAA,EAAe,IAAA,CAAK,CAAC,CAAA,CAAE,QAAA,CAAS,CAAA;AAAA,UAChC,YAAA,EAAc,IAAA,CAAK,CAAC,CAAA,CAAE,CAAC,CAAA,CAAE,IAAA,CAAK,UAAA,CAAW,CAAA,CAAE,WAAA,CAAY,CAAA,CAAE,QAAA,CAAS;AAAA,QACpE,CAAC,CAAA;AAEH,QAAA,OAAO;AAAA,UACL,QAAA,EAAU,CAAA;AAAA,UACV,KAAA,EAAO,IAAI,qBAAA,CAAY;AAAA,YACrB;AAAA,cACE,IAAA,EAAM,OAAA;AAAA,cACN,IAAA,EAAM,4BAAA,CAAU,CACb,YAAA,CAAa,YAAA,CAAQ,KAAA,CAAM,mBAAmB,CAAC,CAAA,CAC/C,OAAA,CAAQ;AAAA,YACb;AAAA,UACF,CAAC;AAAA,QACH,CAAA;AAAA,MACF,EAAA,UAAQ;AAAA,MAER;AAAA,IACF;AAEA,IAAA,OAAO,KAAA,CAAM,aAAA,CAAc,GAAG,IAAI,CAAA;AAAA,EACpC;AACF,CAAA;ADdA;AACA;AACE;AACF,wBAAC","file":"/Users/paul-n/git/ston-fi/public/sdk-contracts/packages/sdk/dist/chunk-4PZQD6XX.cjs","sourcesContent":[null,"import { StonApiClient } from \"@ston-fi/api\";\nimport { Address, TonClient, TupleReader, beginCell } from \"@ton/ton\";\n\nexport class Client extends TonClient {\n  private stonApiClient: StonApiClient;\n\n  constructor(\n    options: ConstructorParameters<typeof TonClient>[0] & {\n      stonApiClient?: StonApiClient;\n    },\n  ) {\n    super(options);\n\n    this.stonApiClient = options.stonApiClient ?? new StonApiClient();\n  }\n\n  public override async callGetMethod(\n    ...args: Parameters<TonClient[\"callGetMethod\"]>\n  ) {\n    if (args[1] === \"get_wallet_address\" && args[2]?.[0]?.type === \"slice\") {\n      try {\n        const jettonWalletAddress =\n          await this.stonApiClient.getJettonWalletAddress({\n            jettonAddress: args[0].toString(),\n            ownerAddress: args[2][0].cell.beginParse().loadAddress().toString(),\n          });\n\n        return {\n          gas_used: 0,\n          stack: new TupleReader([\n            {\n              type: \"slice\",\n              cell: beginCell()\n                .storeAddress(Address.parse(jettonWalletAddress))\n                .endCell(),\n            },\n          ]),\n        };\n      } catch {\n        //\n      }\n    }\n\n    return super.callGetMethod(...args);\n  }\n}\n"]}