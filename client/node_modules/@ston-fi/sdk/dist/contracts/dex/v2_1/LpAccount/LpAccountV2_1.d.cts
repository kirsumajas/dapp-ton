import * as _ton_ton from '@ton/ton';
import { Cell, ContractProvider, SenderArguments, Sender } from '@ton/ton';
import { AddressType, QueryIdType, AmountType } from '../../../../types.cjs';
import { ContractOptions, Contract } from '../../../core/Contract.cjs';
import { DEX_VERSION } from '../../constants.cjs';

interface LpAccountV2_1Options extends ContractOptions {
    gasConstants?: Partial<typeof LpAccountV2_1.gasConstants>;
}
declare class LpAccountV2_1 extends Contract {
    static readonly version: DEX_VERSION;
    static readonly gasConstants: {
        refund: bigint;
        directAddLp: bigint;
        resetGas: bigint;
    };
    readonly gasConstants: {
        refund: bigint;
        directAddLp: bigint;
        resetGas: bigint;
    };
    constructor(address: AddressType, { gasConstants, ...options }?: LpAccountV2_1Options);
    createRefundBody(params?: {
        leftMaybePayload?: Cell;
        rightMaybePayload?: Cell;
        queryId?: QueryIdType;
    }): Promise<Cell>;
    getRefundTxParams(provider: ContractProvider, params?: {
        leftMaybePayload?: Cell;
        rightMaybePayload?: Cell;
        gasAmount?: AmountType;
        queryId?: QueryIdType;
    }): Promise<SenderArguments>;
    sendRefund(provider: ContractProvider, via: Sender, params: Parameters<LpAccountV2_1["getRefundTxParams"]>[1]): Promise<void>;
    createDirectAddLiquidityBody(params: {
        amount0: AmountType;
        amount1: AmountType;
        minimumLpToMint?: AmountType;
        userWalletAddress: AddressType;
        refundAddress?: AddressType;
        excessesAddress?: AddressType;
        dexCustomPayload?: Cell;
        dexCustomPayloadForwardGasAmount?: AmountType;
        queryId?: QueryIdType;
    }): Promise<Cell>;
    getDirectAddLiquidityTxParams(provider: ContractProvider, params: {
        userWalletAddress: AddressType;
        amount0: AmountType;
        amount1: AmountType;
        minimumLpToMint?: AmountType;
        refundAddress?: AddressType;
        excessesAddress?: AddressType;
        dexCustomPayload?: Cell;
        dexCustomPayloadForwardGasAmount?: AmountType;
        gasAmount?: AmountType;
        queryId?: QueryIdType;
    }): Promise<SenderArguments>;
    sendDirectAddLiquidity(provider: ContractProvider, via: Sender, params: Parameters<LpAccountV2_1["getDirectAddLiquidityTxParams"]>[1]): Promise<void>;
    createResetGasBody(params?: {
        queryId?: QueryIdType;
    }): Promise<Cell>;
    getResetGasTxParams(provider: ContractProvider, params?: {
        gasAmount?: AmountType;
        queryId?: QueryIdType;
    }): Promise<SenderArguments>;
    sendResetGas(provider: ContractProvider, via: Sender, params: Parameters<LpAccountV2_1["getResetGasTxParams"]>[1]): Promise<void>;
    getLpAccountData(provider: ContractProvider): Promise<{
        userAddress: _ton_ton.Address;
        poolAddress: _ton_ton.Address;
        amount0: bigint;
        amount1: bigint;
    }>;
}

export { LpAccountV2_1, type LpAccountV2_1Options };
