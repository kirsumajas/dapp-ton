import * as _ton_ton from '@ton/ton';
import { Cell, ContractProvider, SenderArguments, Sender } from '@ton/ton';
import { AddressType, QueryIdType, AmountType } from '../../../../types.js';
import { ContractOptions } from '../../../core/Contract.js';
import { JettonMinter } from '../../../core/JettonMinter.js';
import { JettonWallet } from '../../../core/JettonWallet.js';
import { DEX_VERSION, DEX_TYPE } from '../../constants.js';
import { LpAccountV2_1 } from '../LpAccount/LpAccountV2_1.js';

interface BasePoolV2_1Options extends ContractOptions {
    gasConstants?: Partial<typeof BasePoolV2_1.gasConstants>;
}
declare class BasePoolV2_1 extends JettonMinter {
    static readonly version: DEX_VERSION;
    static readonly gasConstants: {
        collectFees: bigint;
        burn: bigint;
    };
    readonly gasConstants: {
        collectFees: bigint;
        burn: bigint;
    };
    constructor(address: AddressType, { gasConstants, ...options }?: BasePoolV2_1Options);
    createCollectFeesBody(params?: {
        queryId?: QueryIdType;
    }): Promise<Cell>;
    getCollectFeeTxParams(provider: ContractProvider, params?: {
        gasAmount?: AmountType;
        queryId?: QueryIdType;
    }): Promise<SenderArguments>;
    sendCollectFees(provider: ContractProvider, via: Sender, params: Parameters<BasePoolV2_1["getCollectFeeTxParams"]>[1]): Promise<void>;
    createBurnBody(params: {
        amount: AmountType;
        dexCustomPayload?: Cell;
        queryId?: QueryIdType;
    }): Promise<Cell>;
    getBurnTxParams(provider: ContractProvider, params: {
        amount: AmountType;
        userWalletAddress: AddressType;
        dexCustomPayload?: Cell;
        gasAmount?: AmountType;
        queryId?: QueryIdType;
    }): Promise<SenderArguments>;
    sendBurn(provider: ContractProvider, via: Sender, params: Parameters<BasePoolV2_1["getBurnTxParams"]>[1]): Promise<void>;
    getPoolType(provider: ContractProvider): Promise<DEX_TYPE>;
    getLpAccountAddress(provider: ContractProvider, params: {
        ownerAddress: AddressType;
    }): Promise<_ton_ton.Address>;
    getLpAccount(provider: ContractProvider, params: {
        ownerAddress: AddressType;
    }): Promise<LpAccountV2_1>;
    getJettonWallet(provider: ContractProvider, params: {
        ownerAddress: AddressType;
    }): Promise<JettonWallet>;
    getPoolData(provider: ContractProvider): Promise<{
        isLocked: boolean;
        routerAddress: _ton_ton.Address;
        totalSupplyLP: bigint;
        reserve0: bigint;
        reserve1: bigint;
        token0WalletAddress: _ton_ton.Address;
        token1WalletAddress: _ton_ton.Address;
        lpFee: bigint;
        protocolFee: bigint;
        protocolFeeAddress: _ton_ton.Address | null;
        collectedToken0ProtocolFee: bigint;
        collectedToken1ProtocolFee: bigint;
    }>;
    protected implGetPoolData(provider: ContractProvider): Promise<{
        commonPoolData: {
            isLocked: boolean;
            routerAddress: _ton_ton.Address;
            totalSupplyLP: bigint;
            reserve0: bigint;
            reserve1: bigint;
            token0WalletAddress: _ton_ton.Address;
            token1WalletAddress: _ton_ton.Address;
            lpFee: bigint;
            protocolFee: bigint;
            protocolFeeAddress: _ton_ton.Address | null;
            collectedToken0ProtocolFee: bigint;
            collectedToken1ProtocolFee: bigint;
        };
        stack: _ton_ton.TupleReader;
    }>;
}

export { BasePoolV2_1, type BasePoolV2_1Options };
