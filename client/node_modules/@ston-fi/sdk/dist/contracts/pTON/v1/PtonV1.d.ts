import * as _ton_ton from '@ton/ton';
import { ContractProvider, Cell, SenderArguments, Sender } from '@ton/ton';
import { AddressType, AmountType, QueryIdType } from '../../../types.js';
import { ContractOptions } from '../../core/Contract.js';
import { JettonMinter } from '../../core/JettonMinter.js';
import { AbstractPton } from '../AbstractPton.js';
import { pTON_VERSION } from '../constants.js';

interface PtonV1Options extends ContractOptions {
    gasConstants?: Partial<typeof PtonV1.gasConstants>;
}
declare class PtonV1 extends JettonMinter implements AbstractPton {
    static readonly version: pTON_VERSION;
    static readonly address: _ton_ton.Address;
    static readonly gasConstants: {
        deployWallet: bigint;
    };
    readonly version: pTON_VERSION;
    readonly gasConstants: {
        deployWallet: bigint;
    };
    constructor(address?: AddressType, { gasConstants, ...options }?: PtonV1Options);
    getTonTransferTxParams(provider: ContractProvider, params: {
        tonAmount: AmountType;
        destinationAddress: AddressType;
        refundAddress: AddressType;
        forwardPayload?: Cell;
        forwardTonAmount?: AmountType;
        queryId?: QueryIdType;
    }): Promise<SenderArguments>;
    sendTonTransfer(provider: ContractProvider, via: Sender, params: Parameters<PtonV1["getTonTransferTxParams"]>[1]): Promise<void>;
    createDeployWalletBody(params: {
        ownerAddress: AddressType;
        queryId?: QueryIdType;
    }): Promise<Cell>;
    getDeployWalletTxParams(provider: ContractProvider, params: {
        ownerAddress: AddressType;
        gasAmount?: AmountType;
        queryId?: QueryIdType;
    }): Promise<SenderArguments>;
    sendDeployWallet(provider: ContractProvider, via: Sender, params: Parameters<PtonV1["getDeployWalletTxParams"]>[1]): Promise<void>;
}

export { PtonV1, type PtonV1Options };
