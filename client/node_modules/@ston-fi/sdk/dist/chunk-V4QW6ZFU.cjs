"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _nullishCoalesce(lhs, rhsFn) { if (lhs != null) { return lhs; } else { return rhsFn(); } } var _class;

var _chunkI4SOZEKKcjs = require('./chunk-I4SOZEKK.cjs');


var _chunkXATUZSYEcjs = require('./chunk-XATUZSYE.cjs');



var _chunkAZDNTOBWcjs = require('./chunk-AZDNTOBW.cjs');


var _chunkWF6EZ2CWcjs = require('./chunk-WF6EZ2CW.cjs');


var _chunkIIMQROIVcjs = require('./chunk-IIMQROIV.cjs');


var _chunkC4BS7O5Tcjs = require('./chunk-C4BS7O5T.cjs');


var _chunkZJQ75LD3cjs = require('./chunk-ZJQ75LD3.cjs');


var _chunkRE676LGAcjs = require('./chunk-RE676LGA.cjs');


var _chunkKBINKP7Dcjs = require('./chunk-KBINKP7D.cjs');


var _chunkQBYZPWDOcjs = require('./chunk-QBYZPWDO.cjs');

// src/contracts/dex/v1/RouterV1.ts




var _ton = require('@ton/ton');
var RouterV1 = (_class = class _RouterV1 extends _chunkIIMQROIVcjs.Contract {
  static __initStatic() {this.version = _chunkZJQ75LD3cjs.DEX_VERSION.v1}
  static __initStatic2() {this.address = _ton.address.call(void 0, _chunkAZDNTOBWcjs.ROUTER_ADDRESS)}
  static __initStatic3() {this.gasConstants = {
    swapJettonToJetton: {
      gasAmount: _ton.toNano.call(void 0, "0.22"),
      forwardGasAmount: _ton.toNano.call(void 0, "0.175")
    },
    swapJettonToTon: {
      gasAmount: _ton.toNano.call(void 0, "0.17"),
      forwardGasAmount: _ton.toNano.call(void 0, "0.125")
    },
    swapTonToJetton: {
      forwardGasAmount: _ton.toNano.call(void 0, "0.185")
    },
    provideLpJetton: {
      gasAmount: _ton.toNano.call(void 0, "0.3"),
      forwardGasAmount: _ton.toNano.call(void 0, "0.24")
    },
    provideLpTon: {
      forwardGasAmount: _ton.toNano.call(void 0, "0.26")
    }
  }}
  
  constructor(address2 = _RouterV1.address, { gasConstants, ...options } = {}) {
    super(address2, options);
    this.gasConstants = {
      ..._RouterV1.gasConstants,
      ...gasConstants
    };
  }
  async createSwapBody(params) {
    const builder = _ton.beginCell.call(void 0, );
    builder.storeUint(_chunkAZDNTOBWcjs.DEX_OP_CODES.SWAP, 32);
    builder.storeAddress(_chunkQBYZPWDOcjs.toAddress.call(void 0, params.askJettonWalletAddress));
    builder.storeCoins(BigInt(params.minAskAmount));
    builder.storeAddress(_chunkQBYZPWDOcjs.toAddress.call(void 0, params.userWalletAddress));
    const referralAddress = this.maybeReferralAddress(params.referralAddress);
    if (referralAddress) {
      builder.storeUint(1, 1);
      builder.storeAddress(referralAddress);
    } else {
      builder.storeUint(0, 1);
    }
    return builder.endCell();
  }
  /**
   * Build all data required to execute a jetton to jetton `swap` transaction
   *
   * @param {Address | string} params.userWalletAddress - User's address
   * @param {Address | string} params.offerJettonAddress - Jetton address of a token to be swapped
   * @param {Address | string} params.askJettonAddress - Jetton address of a token to be received
   * @param {bigint | number} params.offerAmount - Amount of tokens to be swapped (in basic token units)
   * @param {bigint | number} params.minAskAmount - Minimum amount of tokens received (in basic token units)
   * @param {Address | string | undefined} params.referralAddress - Optional; referral address
   * @param {bigint | number | string | undefined} params.gasAmount - Optional; Custom transaction gas amount (in nanoTons)
   * @param {bigint | number | string | undefined} params.forwardGasAmount - Optional; Custom transaction forward gas amount (in nanoTons)
   * @param {bigint | number | undefined} params.queryId - Optional; query id
   * @param {Cell | undefined} params.jettonCustomPayload - Optional; custom payload for the jetton transfer message
   * @param {Address | string | undefined} params.transferExcessAddress - Optional; address to transfer excess tokens
   *
   * @returns {SenderArguments} data required to execute a jetton `swap` transaction
   */
  async getSwapJettonToJettonTxParams(provider, params) {
    const [offerJettonWalletAddress, askJettonWalletAddress] = await Promise.all([
      provider.open(_chunkWF6EZ2CWcjs.JettonMinter.create(params.offerJettonAddress)).getWalletAddress(params.userWalletAddress),
      provider.open(_chunkWF6EZ2CWcjs.JettonMinter.create(params.askJettonAddress)).getWalletAddress(this.address)
    ]);
    const forwardPayload = await this.createSwapBody({
      userWalletAddress: params.userWalletAddress,
      minAskAmount: params.minAskAmount,
      askJettonWalletAddress,
      referralAddress: params.referralAddress
    });
    const forwardTonAmount = BigInt(
      _nullishCoalesce(params.forwardGasAmount, () => ( this.gasConstants.swapJettonToJetton.forwardGasAmount))
    );
    const body = _chunkKBINKP7Dcjs.createJettonTransferMessage.call(void 0, {
      queryId: _nullishCoalesce(params.queryId, () => ( 0)),
      amount: params.offerAmount,
      destination: this.address,
      responseDestination: _nullishCoalesce(params.transferExcessAddress, () => ( params.userWalletAddress)),
      customPayload: params.jettonCustomPayload,
      forwardTonAmount,
      forwardPayload
    });
    const value = BigInt(
      _nullishCoalesce(params.gasAmount, () => ( this.gasConstants.swapJettonToJetton.gasAmount))
    );
    return {
      to: offerJettonWalletAddress,
      value,
      body
    };
  }
  async sendSwapJettonToJetton(provider, via, params) {
    const txParams = await this.getSwapJettonToJettonTxParams(provider, params);
    return via.send(txParams);
  }
  /**
   * Build all data required to execute a jetton to ton `swap` transaction
   *
   * @param {Address | string} params.userWalletAddress - User's address
   * @param {Address | string} params.offerJettonAddress - Jetton address of a token to be swapped
   * @param {PtonV1} params.proxyTon - Proxy ton contract
   * @param {bigint | number} params.offerAmount - Amount of tokens to be swapped (in basic token units)
   * @param {bigint | number} params.minAskAmount - Minimum amount of tokens received (in basic token units)
   * @param {Address | string | undefined} params.referralAddress - Optional; referral address
   * @param {bigint | number | string | undefined} params.gasAmount - Optional; Custom transaction gas amount (in nanoTons)
   * @param {bigint | number | string | undefined} params.forwardGasAmount - Optional; Custom transaction forward gas amount (in nanoTons)
   * @param {bigint | number | undefined} params.queryId - Optional; query id
   * @param {Cell | undefined} params.jettonCustomPayload - Optional; custom payload for the jetton transfer message
   * @param {Address | string | undefined} params.transferExcessAddress - Optional; address to transfer excess tokens
   *
   * @returns {SenderArguments} data required to execute a jetton `swap` transaction
   */
  async getSwapJettonToTonTxParams(provider, params) {
    this.assertProxyTon(params.proxyTon);
    return await this.getSwapJettonToJettonTxParams(provider, {
      ...params,
      askJettonAddress: params.proxyTon.address,
      gasAmount: _nullishCoalesce(params.gasAmount, () => ( this.gasConstants.swapJettonToTon.gasAmount)),
      forwardGasAmount: _nullishCoalesce(params.forwardGasAmount, () => ( this.gasConstants.swapJettonToTon.forwardGasAmount))
    });
  }
  async sendSwapJettonToTon(provider, via, params) {
    const txParams = await this.getSwapJettonToTonTxParams(provider, params);
    return via.send(txParams);
  }
  /**
   * Build all data required to execute a ton to jetton `swap` transaction
   *
   * @param {Address | string} params.userWalletAddress - User's address
   * @param {PtonV1} params.proxyTon - Proxy ton contract
   * @param {Address | string} params.askJettonAddress - Jetton address of a token to be received
   * @param {bigint | number} params.offerAmount - Amount of ton to be swapped (in nanoTons)
   * @param {bigint | number} params.minAskAmount - Minimum amount of tokens received (in basic token units)
   * @param {Address | string | undefined} params.referralAddress - Optional; Referral address
   * @param {bigint | number | string | undefined} params.forwardGasAmount - Optional; Custom transaction forward gas amount (in nanoTons)
   * @param {bigint | number | undefined} params.queryId - Optional; query id
   *
   * @returns {SenderArguments} data required to execute a ton to jetton `swap` transaction
   */
  async getSwapTonToJettonTxParams(provider, params) {
    this.assertProxyTon(params.proxyTon);
    const askJettonWalletAddress = await provider.open(_chunkWF6EZ2CWcjs.JettonMinter.create(params.askJettonAddress)).getWalletAddress(this.address);
    const forwardPayload = await this.createSwapBody({
      userWalletAddress: params.userWalletAddress,
      minAskAmount: params.minAskAmount,
      askJettonWalletAddress,
      referralAddress: params.referralAddress
    });
    const forwardTonAmount = BigInt(
      _nullishCoalesce(params.forwardGasAmount, () => ( this.gasConstants.swapTonToJetton.forwardGasAmount))
    );
    return await provider.open(params.proxyTon).getTonTransferTxParams({
      queryId: _nullishCoalesce(params.queryId, () => ( 0)),
      tonAmount: params.offerAmount,
      destinationAddress: this.address,
      refundAddress: params.userWalletAddress,
      forwardPayload,
      forwardTonAmount
    });
  }
  async sendSwapTonToJetton(provider, via, params) {
    const txParams = await this.getSwapTonToJettonTxParams(provider, params);
    return via.send(txParams);
  }
  async createProvideLiquidityBody(params) {
    return _ton.beginCell.call(void 0, ).storeUint(_chunkAZDNTOBWcjs.DEX_OP_CODES.PROVIDE_LP, 32).storeAddress(_chunkQBYZPWDOcjs.toAddress.call(void 0, params.routerWalletAddress)).storeCoins(BigInt(params.minLpOut)).endCell();
  }
  /**
   * Collect all data required to execute a jetton `provide_lp` transaction
   *
   * @param {Address | string} params.userWalletAddress - User's address
   * @param {Address | string} params.sendTokenAddress - Address of the provided Jetton token
   * @param {Address | string} params.otherTokenAddress - Address of the other Jetton token in pair
   * @param {bigint | number} params.sendAmount - Amount of the first token deposited as liquidity (in basic token units)
   * @param {bigint | number} params.minLpOut - Minimum amount of created liquidity tokens (in basic token units)
   * @param {bigint | number | string | undefined} params.gasAmount - Optional; Custom transaction gas amount (in nanoTons)
   * @param {bigint | number | string | undefined} params.forwardGasAmount - Optional; Custom transaction forward gas amount (in nanoTons)
   * @param {bigint | number | undefined} params.queryId - Optional; query id
   * @param {Cell | undefined} params.jettonCustomPayload - Optional; custom payload for the jetton transfer message
   *
   * @returns {SenderArguments} data required to execute a jetton `provide_lp` transaction
   */
  async getProvideLiquidityJettonTxParams(provider, params) {
    const [jettonWalletAddress, routerWalletAddress] = await Promise.all([
      provider.open(_chunkWF6EZ2CWcjs.JettonMinter.create(params.sendTokenAddress)).getWalletAddress(params.userWalletAddress),
      provider.open(_chunkWF6EZ2CWcjs.JettonMinter.create(params.otherTokenAddress)).getWalletAddress(this.address)
    ]);
    const forwardPayload = await this.createProvideLiquidityBody({
      routerWalletAddress,
      minLpOut: params.minLpOut
    });
    const forwardTonAmount = BigInt(
      _nullishCoalesce(params.forwardGasAmount, () => ( this.gasConstants.provideLpJetton.forwardGasAmount))
    );
    const body = _chunkKBINKP7Dcjs.createJettonTransferMessage.call(void 0, {
      queryId: _nullishCoalesce(params.queryId, () => ( 0)),
      amount: params.sendAmount,
      destination: this.address,
      responseDestination: _nullishCoalesce(params.transferExcessAddress, () => ( params.userWalletAddress)),
      customPayload: params.jettonCustomPayload,
      forwardTonAmount,
      forwardPayload
    });
    const value = BigInt(
      _nullishCoalesce(params.gasAmount, () => ( this.gasConstants.provideLpJetton.gasAmount))
    );
    return {
      to: jettonWalletAddress,
      value,
      body
    };
  }
  async sendProvideLiquidityJetton(provider, via, params) {
    const txParams = await this.getProvideLiquidityJettonTxParams(
      provider,
      params
    );
    return via.send(txParams);
  }
  /**
   * Collect all data required to execute a proxy ton `provide_lp` transaction
   *
   * @param {Address | string} params.userWalletAddress - User's address
   * @param {PtonV1} params.proxyTon - proxy ton contract
   * @param {Address | string} params.otherTokenAddress - Address of the other Jetton token in pair
   * @param {bigint | number} params.sendAmount - Amount of ton deposited as liquidity (in nanoTons)
   * @param {bigint | number} params.minLpOut - Minimum amount of created liquidity tokens (in basic token units)
   * @param {bigint | number | string | undefined} params.forwardGasAmount - Optional; Custom transaction forward gas amount (in nanoTons)
   * @param {bigint | number | undefined} params.queryId - Optional; query id
   *
   * @returns {SenderArguments} data required to execute a proxy ton `provide_lp` transaction
   */
  async getProvideLiquidityTonTxParams(provider, params) {
    this.assertProxyTon(params.proxyTon);
    const routerWalletAddress = await provider.open(_chunkWF6EZ2CWcjs.JettonMinter.create(params.otherTokenAddress)).getWalletAddress(this.address);
    const forwardPayload = await this.createProvideLiquidityBody({
      routerWalletAddress,
      minLpOut: params.minLpOut
    });
    const forwardTonAmount = BigInt(
      _nullishCoalesce(params.forwardGasAmount, () => ( this.gasConstants.provideLpTon.forwardGasAmount))
    );
    return await provider.open(params.proxyTon).getTonTransferTxParams({
      queryId: _nullishCoalesce(params.queryId, () => ( 0)),
      tonAmount: params.sendAmount,
      destinationAddress: this.address,
      refundAddress: params.userWalletAddress,
      forwardPayload,
      forwardTonAmount
    });
  }
  async sendProvideLiquidityTon(provider, via, params) {
    const txParams = await this.getProvideLiquidityTonTxParams(
      provider,
      params
    );
    return via.send(txParams);
  }
  assertProxyTon(proxyTon) {
    if (proxyTon.version !== _chunkI4SOZEKKcjs.pTON_VERSION.v1) {
      throw new (0, _chunkRE676LGAcjs.UnmatchedPtonVersion)({
        expected: _chunkI4SOZEKKcjs.pTON_VERSION.v1,
        received: proxyTon.version
      });
    }
  }
  /**
   * **Note:** It's necessary to specify addresses of Jetton wallets of the router as the arguments of this method.
   * These addresses can be retrieved with getJettonWalletAddress of the Jetton minter.
   *
   * @param {Address | string} params.token0 - The address of the router's wallet of first Jetton
   * @param {Address | string} params.token1 - The address of the router's wallet of second Jetton
   *
   * @returns {Address} an address of a pool for a specified pair of assets.
   */
  async getPoolAddress(provider, params) {
    const result = await provider.get("get_pool_address", [
      {
        type: "slice",
        cell: _ton.beginCell.call(void 0, ).storeAddress(_chunkQBYZPWDOcjs.toAddress.call(void 0, params.token0)).endCell()
      },
      {
        type: "slice",
        cell: _ton.beginCell.call(void 0, ).storeAddress(_chunkQBYZPWDOcjs.toAddress.call(void 0, params.token1)).endCell()
      }
    ]);
    return result.stack.readAddress();
  }
  /**
   * @param {Address | string} params.token0 - The address of the first Jetton minter
   * @param {Address | string} params.token1 - The address of the second Jetton minter
   *
   * @returns {Address} an address of a pool for a specified pair of assets.
   */
  async getPoolAddressByJettonMinters(provider, params) {
    const [jetton0WalletAddress, jetton1WalletAddress] = await Promise.all([
      provider.open(_chunkWF6EZ2CWcjs.JettonMinter.create(params.token0)).getWalletAddress(this.address),
      provider.open(_chunkWF6EZ2CWcjs.JettonMinter.create(params.token1)).getWalletAddress(this.address)
    ]);
    const poolAddress = await this.getPoolAddress(provider, {
      token0: jetton0WalletAddress,
      token1: jetton1WalletAddress
    });
    return poolAddress;
  }
  /**
   * @param {Address | string} params.token0 - The address of the first Jetton minter
   * @param {Address | string} params.token1 - The address of the second Jetton minter
   *
   * @returns {PoolV1} object for a pool with specified Jetton token addresses.
   */
  async getPool(provider, params) {
    const poolAddress = await this.getPoolAddressByJettonMinters(provider, {
      token0: params.token0,
      token1: params.token1
    });
    return _chunkXATUZSYEcjs.PoolV1.create(poolAddress);
  }
  /**
   * @returns current state of the router.
   */
  async getRouterData(provider) {
    const result = await provider.get("get_router_data", []);
    return {
      isLocked: result.stack.readBoolean(),
      adminAddress: result.stack.readAddress(),
      tempUpgrade: result.stack.readCell(),
      poolCode: result.stack.readCell(),
      jettonLpWalletCode: result.stack.readCell(),
      lpAccountCode: result.stack.readCell()
    };
  }
  maybeReferralAddress(referralAddress) {
    if (!referralAddress) return null;
    const referralAddressParsed = _chunkQBYZPWDOcjs.toAddress.call(void 0, referralAddress);
    if (referralAddressParsed.equals(_chunkC4BS7O5Tcjs.HOLE_ADDRESS)) return null;
    return referralAddressParsed;
  }
}, _class.__initStatic(), _class.__initStatic2(), _class.__initStatic3(), _class);



exports.RouterV1 = RouterV1;
//# sourceMappingURL=chunk-V4QW6ZFU.cjs.map