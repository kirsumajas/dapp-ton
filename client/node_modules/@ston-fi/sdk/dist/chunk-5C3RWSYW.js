import {
  pTON_OP_CODES
} from "./chunk-ZSA5H7PV.js";
import {
  PtonV1
} from "./chunk-MWWEKA26.js";
import {
  pTON_VERSION
} from "./chunk-MEGJZKYP.js";
import {
  toAddress
} from "./chunk-HNMPFVZW.js";

// src/contracts/pTON/v2_1/PtonV2_1.ts
import {
  beginCell,
  toNano
} from "@ton/ton";
var PtonV2_1 = class _PtonV2_1 extends PtonV1 {
  static version = pTON_VERSION.v2_1;
  static gasConstants = {
    tonTransfer: toNano("0.01"),
    deployWallet: toNano("0.1")
  };
  version = _PtonV2_1.version;
  gasConstants;
  constructor(address, { gasConstants, ...options } = {}) {
    super(address, options);
    this.gasConstants = {
      ..._PtonV2_1.gasConstants,
      ...gasConstants
    };
  }
  async createTonTransferBody(params) {
    const builder = beginCell();
    builder.storeUint(pTON_OP_CODES.TON_TRANSFER, 32);
    builder.storeUint(params.queryId ?? 0, 64);
    builder.storeCoins(BigInt(params.tonAmount));
    builder.storeAddress(toAddress(params.refundAddress));
    if (params.forwardPayload) {
      builder.storeBit(true);
      builder.storeRef(params.forwardPayload);
    }
    return builder.endCell();
  }
  async getTonTransferTxParams(provider, params) {
    const to = await this.getWalletAddress(provider, params.destinationAddress);
    const body = await this.createTonTransferBody({
      tonAmount: params.tonAmount,
      refundAddress: params.refundAddress,
      forwardPayload: params.forwardPayload,
      queryId: params.queryId
    });
    const value = BigInt(params.tonAmount) + BigInt(params.forwardTonAmount ?? 0) + BigInt(this.gasConstants.tonTransfer);
    return { to, value, body };
  }
  async sendTonTransfer(provider, via, params) {
    const txParams = await this.getTonTransferTxParams(provider, params);
    return via.send(txParams);
  }
  async createDeployWalletBody(params) {
    return beginCell().storeUint(pTON_OP_CODES.DEPLOY_WALLET, 32).storeUint(params.queryId ?? 0, 64).storeAddress(toAddress(params.ownerAddress)).storeAddress(toAddress(params.excessAddress)).endCell();
  }
  async getDeployWalletTxParams(provider, params) {
    const to = this.address;
    const body = await this.createDeployWalletBody({
      ownerAddress: params.ownerAddress,
      excessAddress: params.excessAddress,
      queryId: params?.queryId
    });
    const value = BigInt(params?.gasAmount ?? this.gasConstants.deployWallet);
    return { to, value, body };
  }
  async sendDeployWallet(provider, via, params) {
    const txParams = await this.getDeployWalletTxParams(provider, params);
    return via.send(txParams);
  }
};

export {
  PtonV2_1
};
//# sourceMappingURL=chunk-5C3RWSYW.js.map