"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _nullishCoalesce(lhs, rhsFn) { if (lhs != null) { return lhs; } else { return rhsFn(); } } function _optionalChain(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }// src/client/Client.ts
var _api = require('@ston-fi/api');
var _ton = require('@ton/ton');
var Client = class extends _ton.TonClient {
  
  constructor(options) {
    super(options);
    this.stonApiClient = _nullishCoalesce(options.stonApiClient, () => ( new (0, _api.StonApiClient)()));
  }
  async callGetMethod(...args) {
    if (args[1] === "get_wallet_address" && _optionalChain([args, 'access', _ => _[2], 'optionalAccess', _2 => _2[0], 'optionalAccess', _3 => _3.type]) === "slice") {
      try {
        const jettonWalletAddress = await this.stonApiClient.getJettonWalletAddress({
          jettonAddress: args[0].toString(),
          ownerAddress: args[2][0].cell.beginParse().loadAddress().toString()
        });
        return {
          gas_used: 0,
          stack: new (0, _ton.TupleReader)([
            {
              type: "slice",
              cell: _ton.beginCell.call(void 0, ).storeAddress(_ton.Address.parse(jettonWalletAddress)).endCell()
            }
          ])
        };
      } catch (e) {
      }
    }
    return super.callGetMethod(...args);
  }
};



exports.Client = Client;
//# sourceMappingURL=chunk-4PZQD6XX.cjs.map