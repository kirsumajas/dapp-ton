import {
  VaultV2_1
} from "./chunk-V2F4T45J.js";
import {
  BasePoolV2_1
} from "./chunk-AIIUO6JT.js";
import {
  pTON_VERSION
} from "./chunk-MEGJZKYP.js";
import {
  DEX_OP_CODES,
  TX_DEADLINE
} from "./chunk-CWGXHOMU.js";
import {
  ROUTER_ADDRESS
} from "./chunk-G6J4NHH6.js";
import {
  JettonMinter
} from "./chunk-S2MQPWHB.js";
import {
  Contract
} from "./chunk-3QLJQGLC.js";
import {
  HOLE_ADDRESS
} from "./chunk-BZOLUFTK.js";
import {
  DEX_VERSION
} from "./chunk-4KVHWM75.js";
import {
  UnmatchedPtonVersion
} from "./chunk-VGVCKGFT.js";
import {
  createJettonTransferMessage
} from "./chunk-5Z5Z5A3U.js";
import {
  toAddress
} from "./chunk-HNMPFVZW.js";

// src/contracts/dex/v2_1/router/BaseRouterV2_1.ts
import {
  Address,
  beginCell,
  toNano
} from "@ton/ton";
var BaseRouterV2_1 = class _BaseRouterV2_1 extends Contract {
  static version = DEX_VERSION.v2_1;
  static gasConstants = {
    swapJettonToJetton: {
      gasAmount: toNano("0.3"),
      forwardGasAmount: toNano("0.24")
    },
    swapJettonToTon: {
      gasAmount: toNano("0.3"),
      forwardGasAmount: toNano("0.24")
    },
    swapTonToJetton: {
      forwardGasAmount: toNano("0.3")
    },
    provideLpJetton: {
      gasAmount: toNano("0.3"),
      forwardGasAmount: toNano("0.235")
    },
    provideLpTon: {
      forwardGasAmount: toNano("0.3")
    },
    singleSideProvideLpJetton: {
      gasAmount: toNano("1"),
      forwardGasAmount: toNano("0.8")
    },
    singleSideProvideLpTon: {
      forwardGasAmount: toNano("0.8")
    }
  };
  gasConstants;
  txDeadline;
  constructor(address, { gasConstants, txDeadline, ...options } = {}) {
    super(address, options);
    if (this.address.equals(Address.parse(ROUTER_ADDRESS))) {
      throw Error(
        [
          "You are trying to create an instance v2.1 Router with a v1 address",
          "Please use the appropriate class for the v1 Router. Otherwise, all the funds will be permanently lost."
        ].join("\n")
      );
    }
    this.gasConstants = {
      ..._BaseRouterV2_1.gasConstants,
      ...gasConstants
    };
    this.txDeadline = txDeadline ?? TX_DEADLINE;
  }
  async createSwapBody(params) {
    if (params.referralValue && (BigInt(params.referralValue) < 0 || BigInt(params.referralValue) > 100)) {
      throw Error(`'referralValue' should be in range [0, 100] BPS`);
    }
    return beginCell().storeUint(DEX_OP_CODES.SWAP, 32).storeAddress(toAddress(params.askJettonWalletAddress)).storeAddress(toAddress(params.refundAddress)).storeAddress(toAddress(params.excessesAddress ?? params.refundAddress)).storeUint(params.deadline ?? this.defaultDeadline, 64).storeRef(
      beginCell().storeCoins(BigInt(params.minAskAmount)).storeAddress(toAddress(params.receiverAddress)).storeCoins(BigInt(params.dexCustomPayloadForwardGasAmount ?? 0)).storeMaybeRef(params.dexCustomPayload).storeCoins(BigInt(params.refundForwardGasAmount ?? 0)).storeMaybeRef(params.refundPayload).storeUint(BigInt(params.referralValue ?? 10), 16).storeAddress(this.maybeReferralAddress(params.referralAddress)).endCell()
    ).endCell();
  }
  async createCrossSwapBody(params) {
    if (params.referralValue && (BigInt(params.referralValue) < 0 || BigInt(params.referralValue) > 100)) {
      throw Error(`'referralValue' should be in range [0, 100] BPS`);
    }
    return beginCell().storeUint(DEX_OP_CODES.CROSS_SWAP, 32).storeAddress(toAddress(params.askJettonWalletAddress)).storeAddress(toAddress(params.refundAddress)).storeAddress(toAddress(params.excessesAddress ?? params.refundAddress)).storeUint(params.deadline ?? this.defaultDeadline, 64).storeRef(
      beginCell().storeCoins(BigInt(params.minAskAmount)).storeAddress(toAddress(params.receiverAddress)).storeCoins(BigInt(params.dexCustomPayloadForwardGasAmount ?? 0)).storeMaybeRef(params.dexCustomPayload).storeCoins(BigInt(params.refundForwardGasAmount ?? 0)).storeMaybeRef(params.refundPayload).storeUint(BigInt(params.referralValue ?? 10), 16).storeAddress(this.maybeReferralAddress(params.referralAddress)).endCell()
    ).endCell();
  }
  async getSwapJettonToJettonTxParams(provider, params) {
    const contractAddress = this.address;
    const [offerJettonWalletAddress, askJettonWalletAddress] = await Promise.all([
      provider.open(JettonMinter.create(params.offerJettonAddress)).getWalletAddress(params.userWalletAddress),
      provider.open(JettonMinter.create(params.askJettonAddress)).getWalletAddress(contractAddress)
    ]);
    const forwardTonAmount = BigInt(
      params.forwardGasAmount ?? this.gasConstants.swapJettonToJetton.forwardGasAmount
    );
    const forwardPayload = await this.createSwapBody({
      askJettonWalletAddress,
      receiverAddress: params.receiverAddress ?? params.userWalletAddress,
      minAskAmount: params.minAskAmount,
      refundAddress: params.refundAddress ?? params.userWalletAddress,
      excessesAddress: params.excessesAddress,
      referralAddress: params.referralAddress,
      referralValue: params.referralValue,
      dexCustomPayload: params.dexCustomPayload,
      dexCustomPayloadForwardGasAmount: params.dexCustomPayloadForwardGasAmount,
      refundPayload: params.refundPayload,
      refundForwardGasAmount: params.refundForwardGasAmount,
      deadline: params.deadline
    });
    const body = createJettonTransferMessage({
      queryId: params.queryId ?? 0,
      amount: params.offerAmount,
      destination: contractAddress,
      responseDestination: params.transferExcessAddress ?? params.userWalletAddress,
      customPayload: params.jettonCustomPayload,
      forwardTonAmount,
      forwardPayload
    });
    const value = BigInt(
      params.gasAmount ?? this.gasConstants.swapJettonToJetton.gasAmount
    );
    return {
      to: offerJettonWalletAddress,
      value,
      body
    };
  }
  async sendSwapJettonToJetton(provider, via, params) {
    const txParams = await this.getSwapJettonToJettonTxParams(provider, params);
    return via.send(txParams);
  }
  async getSwapJettonToTonTxParams(provider, params) {
    this.assertProxyTon(params.proxyTon);
    return await this.getSwapJettonToJettonTxParams(provider, {
      ...params,
      askJettonAddress: params.proxyTon.address,
      gasAmount: params.gasAmount ?? this.gasConstants.swapJettonToTon.gasAmount,
      forwardGasAmount: params.forwardGasAmount ?? this.gasConstants.swapJettonToTon.forwardGasAmount
    });
  }
  async sendSwapJettonToTon(provider, via, params) {
    const txParams = await this.getSwapJettonToTonTxParams(provider, params);
    return via.send(txParams);
  }
  async getSwapTonToJettonTxParams(provider, params) {
    this.assertProxyTon(params.proxyTon);
    const contractAddress = this.address;
    const askJettonWalletAddress = await provider.open(JettonMinter.create(params.askJettonAddress)).getWalletAddress(contractAddress);
    const forwardPayload = await this.createSwapBody({
      askJettonWalletAddress,
      receiverAddress: params.receiverAddress ?? params.userWalletAddress,
      minAskAmount: params.minAskAmount,
      refundAddress: params.refundAddress ?? params.userWalletAddress,
      excessesAddress: params.excessesAddress,
      referralAddress: params.referralAddress,
      referralValue: params.referralValue,
      dexCustomPayload: params.dexCustomPayload,
      dexCustomPayloadForwardGasAmount: params.dexCustomPayloadForwardGasAmount,
      refundPayload: params.refundPayload,
      refundForwardGasAmount: params.refundForwardGasAmount,
      deadline: params.deadline
    });
    const forwardTonAmount = BigInt(
      params.forwardGasAmount ?? this.gasConstants.swapTonToJetton.forwardGasAmount
    );
    return await provider.open(params.proxyTon).getTonTransferTxParams({
      queryId: params.queryId ?? 0,
      tonAmount: params.offerAmount,
      destinationAddress: contractAddress,
      refundAddress: params.userWalletAddress,
      forwardPayload,
      forwardTonAmount
    });
  }
  async sendSwapTonToJetton(provider, via, params) {
    const txParams = await this.getSwapTonToJettonTxParams(provider, params);
    return via.send(txParams);
  }
  async createProvideLiquidityBody(params) {
    return beginCell().storeUint(DEX_OP_CODES.PROVIDE_LP, 32).storeAddress(toAddress(params.routerWalletAddress)).storeAddress(toAddress(params.refundAddress)).storeAddress(toAddress(params.excessesAddress ?? params.refundAddress)).storeUint(params.deadline ?? this.defaultDeadline, 64).storeRef(
      beginCell().storeCoins(BigInt(params.minLpOut)).storeAddress(toAddress(params.receiverAddress)).storeUint(params.bothPositive ? 1 : 0, 1).storeCoins(BigInt(params.dexCustomPayloadForwardGasAmount ?? 0)).storeMaybeRef(params.dexCustomPayload).endCell()
    ).endCell();
  }
  async getProvideLiquidityJettonTxParams(provider, params) {
    return this.implGetProvideLiquidityJettonTxParams(provider, {
      ...params,
      gasAmount: params.gasAmount ?? this.gasConstants.provideLpJetton.gasAmount,
      forwardGasAmount: params.forwardGasAmount ?? this.gasConstants.provideLpJetton.forwardGasAmount,
      bothPositive: true
    });
  }
  async sendProvideLiquidityJetton(provider, via, params) {
    const txParams = await this.getProvideLiquidityJettonTxParams(
      provider,
      params
    );
    return via.send(txParams);
  }
  async getSingleSideProvideLiquidityJettonTxParams(provider, params) {
    return this.implGetProvideLiquidityJettonTxParams(provider, {
      ...params,
      gasAmount: params.gasAmount ?? this.gasConstants.singleSideProvideLpJetton.gasAmount,
      forwardGasAmount: params.forwardGasAmount ?? this.gasConstants.singleSideProvideLpJetton.forwardGasAmount,
      bothPositive: false
    });
  }
  async sendSingleSideProvideLiquidityJetton(provider, via, params) {
    const txParams = await this.getSingleSideProvideLiquidityJettonTxParams(
      provider,
      params
    );
    return via.send(txParams);
  }
  async implGetProvideLiquidityJettonTxParams(provider, params) {
    const contractAddress = this.address;
    const [jettonWalletAddress, routerWalletAddress] = await Promise.all([
      provider.open(JettonMinter.create(params.sendTokenAddress)).getWalletAddress(params.userWalletAddress),
      provider.open(JettonMinter.create(params.otherTokenAddress)).getWalletAddress(contractAddress)
    ]);
    const forwardPayload = await this.createProvideLiquidityBody({
      routerWalletAddress,
      receiverAddress: params.receiverAddress ?? params.userWalletAddress,
      minLpOut: params.minLpOut,
      refundAddress: params.refundAddress ?? params.userWalletAddress,
      excessesAddress: params.excessesAddress,
      dexCustomPayload: params.dexCustomPayload,
      dexCustomPayloadForwardGasAmount: params.dexCustomPayloadForwardGasAmount,
      bothPositive: params.bothPositive,
      deadline: params.deadline
    });
    const forwardTonAmount = BigInt(params.forwardGasAmount);
    const body = createJettonTransferMessage({
      queryId: params.queryId ?? 0,
      amount: params.sendAmount,
      destination: contractAddress,
      responseDestination: params.transferExcessAddress ?? params.userWalletAddress,
      customPayload: params.jettonCustomPayload,
      forwardTonAmount,
      forwardPayload
    });
    const value = BigInt(params.gasAmount);
    return {
      to: jettonWalletAddress,
      value,
      body
    };
  }
  async getProvideLiquidityTonTxParams(provider, params) {
    return this.implGetProvideLiquidityTonTxParams(provider, {
      ...params,
      forwardGasAmount: params.forwardGasAmount ?? this.gasConstants.provideLpTon.forwardGasAmount,
      bothPositive: true
    });
  }
  async sendProvideLiquidityTon(provider, via, params) {
    const txParams = await this.getProvideLiquidityTonTxParams(
      provider,
      params
    );
    return via.send(txParams);
  }
  async getSingleSideProvideLiquidityTonTxParams(provider, params) {
    return this.implGetProvideLiquidityTonTxParams(provider, {
      ...params,
      forwardGasAmount: params.forwardGasAmount ?? this.gasConstants.singleSideProvideLpTon.forwardGasAmount,
      bothPositive: false
    });
  }
  async sendSingleSideProvideLiquidityTon(provider, via, params) {
    const txParams = await this.getSingleSideProvideLiquidityTonTxParams(
      provider,
      params
    );
    return via.send(txParams);
  }
  async implGetProvideLiquidityTonTxParams(provider, params) {
    this.assertProxyTon(params.proxyTon);
    const contractAddress = this.address;
    const routerWalletAddress = await provider.open(JettonMinter.create(params.otherTokenAddress)).getWalletAddress(contractAddress);
    const forwardPayload = await this.createProvideLiquidityBody({
      routerWalletAddress,
      receiverAddress: params.receiverAddress ?? params.userWalletAddress,
      minLpOut: params.minLpOut,
      refundAddress: params.refundAddress ?? params.userWalletAddress,
      excessesAddress: params.excessesAddress,
      dexCustomPayload: params.dexCustomPayload,
      dexCustomPayloadForwardGasAmount: params.dexCustomPayloadForwardGasAmount,
      bothPositive: params.bothPositive,
      deadline: params.deadline
    });
    const forwardTonAmount = BigInt(params.forwardGasAmount);
    return await provider.open(params.proxyTon).getTonTransferTxParams({
      queryId: params.queryId ?? 0,
      tonAmount: params.sendAmount,
      destinationAddress: contractAddress,
      refundAddress: params.userWalletAddress,
      forwardPayload,
      forwardTonAmount
    });
  }
  maybeReferralAddress(referralAddress) {
    if (!referralAddress) return null;
    const referralAddressParsed = toAddress(referralAddress);
    if (referralAddressParsed.equals(HOLE_ADDRESS)) return null;
    return referralAddressParsed;
  }
  get defaultDeadline() {
    return Math.floor(Date.now() / 1e3) + this.txDeadline;
  }
  assertProxyTon(proxyTon) {
    if (proxyTon.version !== pTON_VERSION.v2_1) {
      throw new UnmatchedPtonVersion({
        expected: pTON_VERSION.v2_1,
        received: proxyTon.version
      });
    }
  }
  async getPoolAddress(provider, params) {
    const result = await provider.get("get_pool_address", [
      {
        type: "slice",
        cell: beginCell().storeAddress(toAddress(params.token0)).endCell()
      },
      {
        type: "slice",
        cell: beginCell().storeAddress(toAddress(params.token1)).endCell()
      }
    ]);
    return result.stack.readAddress();
  }
  async getPoolAddressByJettonMinters(provider, params) {
    const [jetton0WalletAddress, jetton1WalletAddress] = await Promise.all([
      provider.open(JettonMinter.create(params.token0)).getWalletAddress(this.address),
      provider.open(JettonMinter.create(params.token1)).getWalletAddress(this.address)
    ]);
    const poolAddress = await this.getPoolAddress(provider, {
      token0: jetton0WalletAddress,
      token1: jetton1WalletAddress
    });
    return poolAddress;
  }
  async getPool(provider, params) {
    const poolAddress = await this.getPoolAddressByJettonMinters(
      provider,
      params
    );
    return BasePoolV2_1.create(poolAddress);
  }
  async getVaultAddress(provider, params) {
    const result = await provider.get("get_vault_address", [
      {
        type: "slice",
        cell: beginCell().storeAddress(toAddress(params.user)).endCell()
      },
      {
        type: "slice",
        cell: beginCell().storeAddress(toAddress(params.tokenWallet)).endCell()
      }
    ]);
    return result.stack.readAddress();
  }
  async getVault(provider, params) {
    const tokenMinter = provider.open(JettonMinter.create(params.tokenMinter));
    const vaultAddress = await this.getVaultAddress(provider, {
      user: params.user,
      tokenWallet: await tokenMinter.getWalletAddress(this.address)
    });
    return VaultV2_1.create(vaultAddress);
  }
  async getRouterVersion(provider) {
    const result = await provider.get("get_router_version", []);
    return {
      major: result.stack.readNumber(),
      minor: result.stack.readNumber(),
      development: result.stack.readString()
    };
  }
  async getRouterData(provider) {
    const result = await provider.get("get_router_data", []);
    return {
      routerId: result.stack.readNumber(),
      dexType: result.stack.readString(),
      isLocked: result.stack.readBoolean(),
      adminAddress: result.stack.readAddress(),
      tempUpgrade: result.stack.readCell(),
      poolCode: result.stack.readCell(),
      jettonLpWalletCode: result.stack.readCell(),
      lpAccountCode: result.stack.readCell(),
      vaultCode: result.stack.readCell()
    };
  }
};

export {
  BaseRouterV2_1
};
//# sourceMappingURL=chunk-B5WQRUWB.js.map