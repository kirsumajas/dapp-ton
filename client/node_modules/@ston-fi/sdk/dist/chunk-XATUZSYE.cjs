"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _nullishCoalesce(lhs, rhsFn) { if (lhs != null) { return lhs; } else { return rhsFn(); } } function _optionalChain(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; } var _class;

var _chunkH2ALU6LDcjs = require('./chunk-H2ALU6LD.cjs');


var _chunkAZDNTOBWcjs = require('./chunk-AZDNTOBW.cjs');


var _chunkWF6EZ2CWcjs = require('./chunk-WF6EZ2CW.cjs');


var _chunkVJSHCTQ7cjs = require('./chunk-VJSHCTQ7.cjs');


var _chunkZJQ75LD3cjs = require('./chunk-ZJQ75LD3.cjs');


var _chunkQBYZPWDOcjs = require('./chunk-QBYZPWDO.cjs');

// src/contracts/dex/v1/PoolV1.ts



var _ton = require('@ton/ton');
var PoolV1 = (_class = class _PoolV1 extends _chunkWF6EZ2CWcjs.JettonMinter {
  static __initStatic() {this.version = _chunkZJQ75LD3cjs.DEX_VERSION.v1}
  static __initStatic2() {this.gasConstants = {
    collectFees: _ton.toNano.call(void 0, "1.1"),
    burn: _ton.toNano.call(void 0, "0.5")
  }}
  
  constructor(address, { gasConstants, ...options } = {}) {
    super(address, options);
    this.gasConstants = {
      ..._PoolV1.gasConstants,
      ...gasConstants
    };
  }
  async createCollectFeesBody(params) {
    return _ton.beginCell.call(void 0, ).storeUint(_chunkAZDNTOBWcjs.DEX_OP_CODES.COLLECT_FEES, 32).storeUint(_nullishCoalesce(_optionalChain([params, 'optionalAccess', _ => _.queryId]), () => ( 0)), 64).endCell();
  }
  /**
   * Build all data required to execute a `collect_fees` transaction.
   *
   * @param {bigint | number | string | undefined} params.gasAmount - Optional; Custom transaction gas amount (in nanoTons)
   * @param {bigint | number | undefined} params.queryId - Optional; query id
   *
   * @returns {SenderArguments} all data required to execute a `collect_fees` transaction.
   */
  async getCollectFeeTxParams(provider, params) {
    const to = this.address;
    const body = await this.createCollectFeesBody({
      queryId: _optionalChain([params, 'optionalAccess', _2 => _2.queryId])
    });
    const value = BigInt(_nullishCoalesce(_optionalChain([params, 'optionalAccess', _3 => _3.gasAmount]), () => ( this.gasConstants.collectFees)));
    return { to, value, body };
  }
  async sendCollectFees(provider, via, params) {
    const txParams = await this.getCollectFeeTxParams(provider, params);
    return via.send(txParams);
  }
  async createBurnBody(params) {
    return _ton.beginCell.call(void 0, ).storeUint(_chunkAZDNTOBWcjs.DEX_OP_CODES.BURN, 32).storeUint(_nullishCoalesce(_optionalChain([params, 'optionalAccess', _4 => _4.queryId]), () => ( 0)), 64).storeCoins(BigInt(params.amount)).storeAddress(_chunkQBYZPWDOcjs.toAddress.call(void 0, params.responseAddress)).storeMaybeRef().endCell();
  }
  /**
   * Build all data required to execute a `burn` transaction.
   *
   * @param {bigint | number} params.amount - Amount of lp tokens to burn (in basic token units)
   * @param {Address | string} params.responseAddress - Address of a user
   * @param {bigint | number | string | undefined} params.gasAmount - Optional; Custom transaction gas amount (in nanoTons)
   * @param {bigint | number | undefined} params.queryId - Optional; query id
   *
   * @returns {SenderArguments} all data required to execute a `burn` transaction.
   */
  async getBurnTxParams(provider, params) {
    const [to, body] = await Promise.all([
      this.getWalletAddress(provider, params.responseAddress),
      this.createBurnBody({
        amount: params.amount,
        responseAddress: params.responseAddress,
        queryId: params.queryId
      })
    ]);
    const value = BigInt(_nullishCoalesce(params.gasAmount, () => ( this.gasConstants.burn)));
    return { to, value, body };
  }
  async sendBurn(provider, via, params) {
    const txParams = await this.getBurnTxParams(provider, params);
    return via.send(txParams);
  }
  /**
   * Estimate the expected result of the amount of jettonWallet tokens swapped to the other token of the pool
   *
   * @param {bigint | number} params.amount - Amount of tokens to swap (in basic token units)
   * @param {Address | string} params.jettonWallet - jetton wallet address (owned by the router)
   *
   * @returns structure with the expected result of a token swap
   */
  async getExpectedOutputs(provider, params) {
    const result = await provider.get("get_expected_outputs", [
      { type: "int", value: BigInt(params.amount) },
      {
        type: "slice",
        cell: _ton.beginCell.call(void 0, ).storeAddress(_chunkQBYZPWDOcjs.toAddress.call(void 0, params.jettonWallet)).endCell()
      }
    ]);
    return {
      jettonToReceive: result.stack.readBigNumber(),
      protocolFeePaid: result.stack.readBigNumber(),
      refFeePaid: result.stack.readBigNumber()
    };
  }
  /**
   * Estimate an expected amount of lp tokens minted when providing liquidity.
   *
   * @param {bigint | number} params.amount0 - Amount of tokens for the first Jetton (in basic token units)
   * @param {bigint | number} params.amount1 - Amount of tokens for the second Jetton (in basic token units)
   *
   * @returns {bigint} an estimated amount of liquidity tokens to be minted
   */
  async getExpectedTokens(provider, params) {
    const result = await provider.get("get_expected_tokens", [
      { type: "int", value: BigInt(params.amount0) },
      { type: "int", value: BigInt(params.amount1) }
    ]);
    return result.stack.readBigNumber();
  }
  /**
   * Estimate expected liquidity freed upon burning liquidity tokens.
   *
   * @param {bigint | number} params.jettonAmount - Amount of liquidity tokens (in basic token units)
   *
   * @returns structure with expected freed liquidity
   */
  async getExpectedLiquidity(provider, params) {
    const result = await provider.get("get_expected_liquidity", [
      { type: "int", value: BigInt(params.jettonAmount) }
    ]);
    return {
      amount0: result.stack.readBigNumber(),
      amount1: result.stack.readBigNumber()
    };
  }
  /**
   * @param {Address | string} params.ownerAddress - Address of a user
   *
   * @returns {Address} the lp account address of a user
   */
  async getLpAccountAddress(provider, params) {
    const result = await provider.get("get_lp_account_address", [
      {
        type: "slice",
        cell: _ton.beginCell.call(void 0, ).storeAddress(_chunkQBYZPWDOcjs.toAddress.call(void 0, params.ownerAddress)).endCell()
      }
    ]);
    return result.stack.readAddress();
  }
  /**
   * @param {Address | string} params.ownerAddress - Address of a user
   *
   * @returns {JettonWallet} a JettonWallet instance with address returned by getJettonWalletAddress
   */
  async getJettonWallet(provider, params) {
    const jettonWalletAddress = await this.getWalletAddress(
      provider,
      params.ownerAddress
    );
    return _chunkVJSHCTQ7cjs.JettonWallet.create(jettonWalletAddress);
  }
  /**
   * @returns structure containing current state of the pool.
   */
  async getPoolData(provider) {
    const result = await provider.get("get_pool_data", []);
    return {
      reserve0: result.stack.readBigNumber(),
      reserve1: result.stack.readBigNumber(),
      token0WalletAddress: result.stack.readAddress(),
      token1WalletAddress: result.stack.readAddress(),
      lpFee: result.stack.readBigNumber(),
      protocolFee: result.stack.readBigNumber(),
      refFee: result.stack.readBigNumber(),
      protocolFeeAddress: result.stack.readAddress(),
      collectedToken0ProtocolFee: result.stack.readBigNumber(),
      collectedToken1ProtocolFee: result.stack.readBigNumber()
    };
  }
  /**
   * @param {Address | string} params.ownerAddress - Address of a user
   *
   * @returns {LpAccount} object for address returned by getLpAccountAddress
   */
  async getLpAccount(provider, params) {
    const lpAccountAddress = await this.getLpAccountAddress(provider, params);
    return _chunkH2ALU6LDcjs.LpAccountV1.create(lpAccountAddress);
  }
}, _class.__initStatic(), _class.__initStatic2(), _class);



exports.PoolV1 = PoolV1;
//# sourceMappingURL=chunk-XATUZSYE.cjs.map