{"version":3,"sources":["../src/contracts/core/Contract.ts"],"sourcesContent":["import type { Address, Contract as ContractInterface } from \"@ton/ton\";\n\nimport type { AddressType } from \"../../types\";\nimport { toAddress } from \"../../utils/toAddress\";\n\n// biome-ignore lint/suspicious/noEmptyInterface: it is empty for base class but may be extended in derived classes\nexport interface ContractOptions {}\n\nexport abstract class Contract implements ContractInterface {\n  public readonly address: Address;\n\n  constructor(address: AddressType, options?: ContractOptions) {\n    this.address = toAddress(address);\n  }\n\n  public static create<\n    T extends Contract,\n    C extends new (\n      address: AddressType,\n    ) => T,\n  >(this: C, address: AddressType) {\n    // biome-ignore lint/complexity/noThisInStatic: this here is a derived class\n    return new this(address) as InstanceType<C>;\n  }\n}\n"],"mappings":";;;;;AAQO,IAAe,WAAf,MAAqD;AAAA,EAC1C;AAAA,EAEhB,YAAY,SAAsB,SAA2B;AAC3D,SAAK,UAAU,UAAU,OAAO;AAAA,EAClC;AAAA,EAEA,OAAc,OAKH,SAAsB;AAE/B,WAAO,IAAI,KAAK,OAAO;AAAA,EACzB;AACF;","names":[]}