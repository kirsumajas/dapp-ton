{"version":3,"sources":["../src/contracts/dex/v2_1/LpAccount/LpAccountV2_1.ts"],"sourcesContent":["import {\n  type Cell,\n  type ContractProvider,\n  type Sender,\n  type SenderArguments,\n  beginCell,\n  toNano,\n} from \"@ton/ton\";\n\nimport type { AddressType, AmountType, QueryIdType } from \"../../../../types\";\nimport { toAddress } from \"../../../../utils/toAddress\";\nimport { Contract, type ContractOptions } from \"../../../core/Contract\";\nimport { DEX_VERSION } from \"../../constants\";\nimport { DEX_OP_CODES } from \"../constants\";\n\nexport interface LpAccountV2_1Options extends ContractOptions {\n  gasConstants?: Partial<typeof LpAccountV2_1.gasConstants>;\n}\n\nexport class LpAccountV2_1 extends Contract {\n  public static readonly version: DEX_VERSION = DEX_VERSION.v2_1;\n\n  public static readonly gasConstants = {\n    refund: toNano(\"0.8\"),\n    directAddLp: toNano(\"0.3\"),\n    resetGas: toNano(\"0.02\"),\n  };\n\n  public readonly gasConstants;\n\n  constructor(\n    address: AddressType,\n    { gasConstants, ...options }: LpAccountV2_1Options = {},\n  ) {\n    super(address, options);\n\n    this.gasConstants = {\n      ...LpAccountV2_1.gasConstants,\n      ...gasConstants,\n    };\n  }\n\n  public async createRefundBody(params?: {\n    leftMaybePayload?: Cell;\n    rightMaybePayload?: Cell;\n    queryId?: QueryIdType;\n  }): Promise<Cell> {\n    return beginCell()\n      .storeUint(DEX_OP_CODES.REFUND_ME, 32)\n      .storeUint(params?.queryId ?? 0, 64)\n      .storeMaybeRef(params?.leftMaybePayload)\n      .storeMaybeRef(params?.rightMaybePayload)\n      .endCell();\n  }\n\n  public async getRefundTxParams(\n    provider: ContractProvider,\n    params?: {\n      leftMaybePayload?: Cell;\n      rightMaybePayload?: Cell;\n      gasAmount?: AmountType;\n      queryId?: QueryIdType;\n    },\n  ): Promise<SenderArguments> {\n    const to = this.address;\n\n    const body = await this.createRefundBody({\n      leftMaybePayload: params?.leftMaybePayload,\n      rightMaybePayload: params?.rightMaybePayload,\n      queryId: params?.queryId,\n    });\n\n    const value = BigInt(params?.gasAmount ?? this.gasConstants.refund);\n\n    return { to, value, body };\n  }\n\n  public async sendRefund(\n    provider: ContractProvider,\n    via: Sender,\n    params: Parameters<LpAccountV2_1[\"getRefundTxParams\"]>[1],\n  ) {\n    const txParams = await this.getRefundTxParams(provider, params);\n\n    return via.send(txParams);\n  }\n\n  public async createDirectAddLiquidityBody(params: {\n    amount0: AmountType;\n    amount1: AmountType;\n    minimumLpToMint?: AmountType;\n    userWalletAddress: AddressType;\n    refundAddress?: AddressType;\n    excessesAddress?: AddressType;\n    dexCustomPayload?: Cell;\n    dexCustomPayloadForwardGasAmount?: AmountType;\n    queryId?: QueryIdType;\n  }): Promise<Cell> {\n    return beginCell()\n      .storeUint(DEX_OP_CODES.DIRECT_ADD_LIQUIDITY, 32)\n      .storeUint(params?.queryId ?? 0, 64)\n      .storeCoins(BigInt(params.amount0))\n      .storeCoins(BigInt(params.amount1))\n      .storeCoins(BigInt(params.minimumLpToMint ?? 1))\n      .storeCoins(BigInt(params.dexCustomPayloadForwardGasAmount ?? 0))\n      .storeAddress(toAddress(params.userWalletAddress))\n      .storeMaybeRef(params.dexCustomPayload)\n      .storeRef(\n        beginCell()\n          .storeAddress(\n            toAddress(params.refundAddress ?? params.userWalletAddress),\n          )\n          .storeAddress(\n            toAddress(\n              params.excessesAddress ??\n                params.refundAddress ??\n                params.userWalletAddress,\n            ),\n          )\n          .endCell(),\n      )\n      .endCell();\n  }\n\n  public async getDirectAddLiquidityTxParams(\n    provider: ContractProvider,\n    params: {\n      userWalletAddress: AddressType;\n      amount0: AmountType;\n      amount1: AmountType;\n      minimumLpToMint?: AmountType;\n      refundAddress?: AddressType;\n      excessesAddress?: AddressType;\n      dexCustomPayload?: Cell;\n      dexCustomPayloadForwardGasAmount?: AmountType;\n      gasAmount?: AmountType;\n      queryId?: QueryIdType;\n    },\n  ): Promise<SenderArguments> {\n    const to = this.address;\n\n    const body = await this.createDirectAddLiquidityBody({\n      amount0: params.amount0,\n      amount1: params.amount1,\n      minimumLpToMint: params.minimumLpToMint,\n      userWalletAddress: params.userWalletAddress,\n      refundAddress: params.refundAddress,\n      excessesAddress: params.excessesAddress,\n      dexCustomPayload: params.dexCustomPayload,\n      dexCustomPayloadForwardGasAmount: params.dexCustomPayloadForwardGasAmount,\n      queryId: params.queryId,\n    });\n\n    const value = BigInt(params.gasAmount ?? this.gasConstants.directAddLp);\n\n    return { to, value, body };\n  }\n\n  public async sendDirectAddLiquidity(\n    provider: ContractProvider,\n    via: Sender,\n    params: Parameters<LpAccountV2_1[\"getDirectAddLiquidityTxParams\"]>[1],\n  ) {\n    const txParams = await this.getDirectAddLiquidityTxParams(provider, params);\n\n    return via.send(txParams);\n  }\n\n  public async createResetGasBody(params?: {\n    queryId?: QueryIdType;\n  }): Promise<Cell> {\n    return beginCell()\n      .storeUint(DEX_OP_CODES.RESET_GAS, 32)\n      .storeUint(params?.queryId ?? 0, 64)\n      .endCell();\n  }\n\n  public async getResetGasTxParams(\n    provider: ContractProvider,\n    params?: {\n      gasAmount?: AmountType;\n      queryId?: QueryIdType;\n    },\n  ): Promise<SenderArguments> {\n    const to = this.address;\n\n    const body = await this.createResetGasBody({\n      queryId: params?.queryId,\n    });\n\n    const value = BigInt(params?.gasAmount ?? this.gasConstants.resetGas);\n\n    return { to, value, body };\n  }\n\n  public async sendResetGas(\n    provider: ContractProvider,\n    via: Sender,\n    params: Parameters<LpAccountV2_1[\"getResetGasTxParams\"]>[1],\n  ) {\n    const txParams = await this.getResetGasTxParams(provider, params);\n\n    return via.send(txParams);\n  }\n\n  public async getLpAccountData(provider: ContractProvider) {\n    const result = await provider.get(\"get_lp_account_data\", []);\n\n    return {\n      userAddress: result.stack.readAddress(),\n      poolAddress: result.stack.readAddress(),\n      amount0: result.stack.readBigNumber(),\n      amount1: result.stack.readBigNumber(),\n    };\n  }\n}\n"],"mappings":"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","names":[]}