"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _nullishCoalesce(lhs, rhsFn) { if (lhs != null) { return lhs; } else { return rhsFn(); } } function _optionalChain(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; } var _class;

var _chunkT4T7FGFZcjs = require('./chunk-T4T7FGFZ.cjs');


var _chunkJLYOJWE3cjs = require('./chunk-JLYOJWE3.cjs');


var _chunk3ATZT4MWcjs = require('./chunk-3ATZT4MW.cjs');

// src/contracts/farm/v2/FarmNftItemV2.ts
var FarmNftItemV2 = (_class = class extends _chunkT4T7FGFZcjs.FarmNftItemV1 {
  static __initStatic() {this.version = _chunkJLYOJWE3cjs.FARM_VERSION.v2}
  async createDestroyBody(params) {
    return _chunk3ATZT4MWcjs.createSbtDestroyMessage.call(void 0, {
      queryId: _nullishCoalesce(_optionalChain([params, 'optionalAccess', _ => _.queryId]), () => ( 0))
    });
  }
  /**
   * Build all data required to execute a `destroy` transaction.
   *
   * @param {bigint | number | string | undefined} params.gasAmount - Optional; amount of gas for the transaction (in nanoTons)
   * @param {bigint | number | undefined} params.queryId - Optional; query id
   *
   * @returns {SenderArguments} all data required to execute a `destroy` transaction.
   */
  async getDestroyTxParams(provider, params) {
    const to = this.address;
    const body = await this.createDestroyBody({
      queryId: _optionalChain([params, 'optionalAccess', _2 => _2.queryId])
    });
    const value = BigInt(_nullishCoalesce(_optionalChain([params, 'optionalAccess', _3 => _3.gasAmount]), () => ( this.gasConstants.destroy)));
    return { to, value, body };
  }
  async sendDestroy(provider, via, params) {
    const txParams = await this.getDestroyTxParams(provider, params);
    return via.send(txParams);
  }
  /**
   * @returns structure containing current state of the farm NFT
   *
   * @property {number} status Status of the contract: uninitialized `0`, active `1`, unstaked `2`, claiming `3`
   * @property {bigint} revokeTime Timestamp of unstake
   * @property {bigint} stakedTokens Amount of staked tokens
   * @property {bigint} claimedPerUnitNanorewards `accrued_per_unit_nanorewards` at the time the user made the stake or last claimed rewards
   * @property {bigint} stakeDate Timestamp in which the owner started staking
   * @property {boolean} isSoulbound If nft is soulbound; Always true in V2
   */
  async getFarmingData(provider) {
    const result = await provider.get("get_farming_data", []);
    return {
      status: result.stack.readNumber(),
      revokeTime: result.stack.readBigNumber(),
      stakedTokens: result.stack.readBigNumber(),
      claimedPerUnitNanorewards: result.stack.readBigNumber(),
      stakeDate: result.stack.readBigNumber(),
      isSoulbound: true
      // NFTs are always soulbound in V2
    };
  }
}, _class.__initStatic(), _class);



exports.FarmNftItemV2 = FarmNftItemV2;
//# sourceMappingURL=chunk-OXTEV2FI.cjs.map