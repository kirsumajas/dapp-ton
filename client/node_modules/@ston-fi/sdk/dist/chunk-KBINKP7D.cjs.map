{"version":3,"sources":["/Users/paul-n/git/ston-fi/public/sdk-contracts/packages/sdk/dist/chunk-KBINKP7D.cjs","../src/utils/createJettonTransferMessage.ts"],"names":[],"mappings":"AAAA;AACE;AACF,wDAA6B;AAC7B;AACA;ACJA,+BAAqC;AAa9B,SAAS,2BAAA,CAA4B,MAAA,EAQzC;AACD,EAAA,MAAM,QAAA,EAAU,4BAAA,CAAU;AAE1B,EAAA,OAAA,CAAQ,SAAA,CAAU,SAAA,EAAW,EAAE,CAAA;AAC/B,EAAA,OAAA,CAAQ,SAAA,CAAU,MAAA,CAAO,OAAA,EAAS,EAAE,CAAA;AACpC,EAAA,OAAA,CAAQ,UAAA,CAAW,MAAA,CAAO,MAAA,CAAO,MAAM,CAAC,CAAA;AACxC,EAAA,OAAA,CAAQ,YAAA,CAAa,yCAAA,MAAU,CAAO,WAAW,CAAC,CAAA;AAClD,EAAA,OAAA,CAAQ,YAAA;AAAA,IACN,MAAA,CAAO,oBAAA,EACH,yCAAA,MAAU,CAAO,mBAAmB,EAAA,EACpC,KAAA;AAAA,EACN,CAAA;AAEA,EAAA,GAAA,CAAI,MAAA,CAAO,aAAA,EAAe;AACxB,IAAA,OAAA,CAAQ,QAAA,CAAS,IAAI,CAAA;AACrB,IAAA,OAAA,CAAQ,QAAA,CAAS,MAAA,CAAO,aAAa,CAAA;AAAA,EACvC,EAAA,KAAO;AACL,IAAA,OAAA,CAAQ,QAAA,CAAS,KAAK,CAAA;AAAA,EACxB;AAEA,EAAA,OAAA,CAAQ,UAAA,CAAW,MAAA,CAAO,MAAA,CAAO,gBAAgB,CAAC,CAAA;AAElD,EAAA,GAAA,CAAI,MAAA,CAAO,cAAA,EAAgB;AACzB,IAAA,OAAA,CAAQ,QAAA,CAAS,IAAI,CAAA;AACrB,IAAA,OAAA,CAAQ,QAAA,CAAS,MAAA,CAAO,cAAc,CAAA;AAAA,EACxC,EAAA,KAAO;AACL,IAAA,OAAA,CAAQ,QAAA,CAAS,KAAK,CAAA;AAAA,EACxB;AAEA,EAAA,OAAO,OAAA,CAAQ,OAAA,CAAQ,CAAA;AACzB;ADrBA;AACA;AACE;AACF,kEAAC","file":"/Users/paul-n/git/ston-fi/public/sdk-contracts/packages/sdk/dist/chunk-KBINKP7D.cjs","sourcesContent":[null,"import { type Cell, beginCell } from \"@ton/ton\";\n\nimport type { AddressType, AmountType, QueryIdType } from \"../types\";\nimport { toAddress } from \"./toAddress\";\n\n/**\n * Implements `transfer` function from Jettons Standard.\n * [Docs](https://github.com/ton-blockchain/TEPs/blob/master/text/0074-jettons-standard.md#1-transfer)\n *\n * ```TL-B\n * transfer#0f8a7ea5 query_id:uint64 amount:(VarUInteger 16) destination:MsgAddress response_destination:MsgAddress custom_payload:(Maybe ^Cell) forward_ton_amount:(VarUInteger 16) forward_payload:(Either Cell ^Cell) = InternalMsgBody;\n * ```\n */\nexport function createJettonTransferMessage(params: {\n  queryId: QueryIdType;\n  amount: AmountType;\n  destination: AddressType;\n  responseDestination?: AddressType;\n  customPayload?: Cell;\n  forwardTonAmount: AmountType;\n  forwardPayload?: Cell;\n}) {\n  const builder = beginCell();\n\n  builder.storeUint(0xf8a7ea5, 32);\n  builder.storeUint(params.queryId, 64);\n  builder.storeCoins(BigInt(params.amount));\n  builder.storeAddress(toAddress(params.destination));\n  builder.storeAddress(\n    params.responseDestination\n      ? toAddress(params.responseDestination)\n      : undefined,\n  );\n\n  if (params.customPayload) {\n    builder.storeBit(true);\n    builder.storeRef(params.customPayload);\n  } else {\n    builder.storeBit(false);\n  }\n\n  builder.storeCoins(BigInt(params.forwardTonAmount));\n\n  if (params.forwardPayload) {\n    builder.storeBit(true);\n    builder.storeRef(params.forwardPayload);\n  } else {\n    builder.storeBit(false);\n  }\n\n  return builder.endCell();\n}\n"]}