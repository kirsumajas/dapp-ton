{"version":3,"sources":["/Users/paul-n/git/ston-fi/public/sdk-contracts/packages/sdk/dist/chunk-4IAXLHZ3.cjs","../src/contracts/farm/v2/FarmNftMinterV2.ts"],"names":[],"mappings":"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","file":"/Users/paul-n/git/ston-fi/public/sdk-contracts/packages/sdk/dist/chunk-4IAXLHZ3.cjs","sourcesContent":[null,"import type { ContractProvider } from \"@ton/ton\";\n\nimport { FARM_VERSION } from \"../constants\";\nimport {\n  FarmNftMinterV1,\n  type FarmNftMinterV1Options,\n} from \"../v1/FarmNftMinterV1\";\n\nexport interface FarmNftMinterV2Options extends FarmNftMinterV1Options {}\n\n/**\n * @deprecated `v2` version of the FarmNftMinter contracts is deprecated.\n *\n * Only use this version for get data contract calls.\n * For all other operations, use the latest version of the contract.\n */\nexport class FarmNftMinterV2 extends FarmNftMinterV1 {\n  public static override version = FARM_VERSION.v2;\n\n  /**\n   * @returns structure containing pending data\n   *\n   * @property {bigint} changeCustodianTs - Timestamp when 'change_custodian' was initiated\n   * @property {bigint} sendMsgTs - Timestamp when 'send_raw_msg' was initiated\n   * @property {bigint} codeUpgradeTs - Timestamp when 'code_upgrade' was initiated\n   * @property {Address} newCustodian - New custodian that will be set after confirmation\n   * @property {Cell} pendingMsg - Pending msg that will be sends after confirmation\n   * @property {Cell} newCode - New contract code that will be set after confirmation\n   * @property {Cell} newStorage - New contract storage that will be set after confirmation\n   */\n  public async getPendingData(provider: ContractProvider) {\n    const result = await provider.get(\"get_pending_data\", []);\n\n    return {\n      changeCustodianTs: result.stack.readBigNumber(),\n      sendMsgTs: result.stack.readBigNumber(),\n      codeUpgradeTs: result.stack.readBigNumber(),\n      newCustodian: result.stack.readAddressOpt(),\n      pendingMsg: result.stack.readCell(),\n      newCode: result.stack.readCell(),\n      newStorage: result.stack.readCell(),\n    };\n  }\n\n  /**\n   * @returns structure containing version data\n   *\n   * @property {number} major - Major version; breaking changes in api\n   * @property {number} minor - Minor version; non-breaking new functionality\n   * @property {string} development - Development version; can contain breaking changes\n   */\n  public async getVersion(provider: ContractProvider) {\n    const result = await provider.get(\"get_version\", []);\n\n    return {\n      major: result.stack.readNumber(),\n      minor: result.stack.readNumber(),\n      development: result.stack.readString(),\n    };\n  }\n\n  /**\n   * @returns structure containing current state of the minter\n   *\n   * @property {bigint} nextItemIndex - Index of the next nft in this collection\n   * @property {bigint} lastUpdateTime - Last time farming values were updated\n   * @property {number} status - Status of the contract: uninitialized `0`, active `1`, paused `3`\n   * @property {bigint} depositedNanorewards - Deposited rewards in nanounits\n   * @property {bigint} currentStakedTokens - Number of staked tokens in basic token units\n   * @property {bigint} accruedPerUnitNanorewards - Number of accrued nanorewards per basic stake token unit\n   * @property {bigint} claimedFeeNanorewards - Claimed fees\n   * @property {bigint} accruedFeeNanorewards - Accrued fees\n   * @property {bigint} accruedNanorewards - Total number of accrued rewards in nanounits\n   * @property {bigint} claimedNanorewards - Number of claimed rewards in nanounits\n   * @property {bigint} contractUniqueId - Minter id\n   * @property {bigint} nanorewardsPer24h - Total number of accrued rewards per 24h in nanounits\n   * @property {bigint} adminFee - Admin fee; divider is 10000\n   * @property {bigint} minStakeTime - Minimum staking time\n   * @property {Address} stakingTokenWallet - Minter's staking jetton wallet\n   * @property {Address} rewardTokenWallet - Minter's reward jetton wallet\n   * @property {Address} custodianAddress - Custodian address\n   * @property {boolean} canChangeCustodian - If can change custodian\n   * @property {boolean} canSendRawMsg - If can send raw msg\n   * @property {boolean} canChangeFee - If can change fee\n   * @property {boolean} unrestrictedDepositRewards - If rewards can be deposited by anyone\n   * @property {boolean} soulboundItems - Whether minted NFTs are soulbound; Always true in V2\n   */\n  public override async getFarmingMinterData(provider: ContractProvider) {\n    const result = await provider.get(\"get_farming_minter_data\", []);\n\n    return {\n      nextItemIndex: result.stack.readBigNumber(),\n      lastUpdateTime: result.stack.readBigNumber(),\n      status: result.stack.readNumber(),\n      depositedNanorewards: result.stack.readBigNumber(),\n      currentStakedTokens: result.stack.readBigNumber(),\n      accruedPerUnitNanorewards: result.stack.readBigNumber(),\n      claimedFeeNanorewards: result.stack.readBigNumber(),\n      accruedFeeNanorewards: result.stack.readBigNumber(),\n      accruedNanorewards: result.stack.readBigNumber(),\n      claimedNanorewards: result.stack.readBigNumber(),\n      contractUniqueId: result.stack.readBigNumber(),\n      nanorewardsPer24h: result.stack.readBigNumber(),\n      adminFee: result.stack.readBigNumber(),\n      minStakeTime: result.stack.readBigNumber(),\n      stakingTokenWallet: result.stack.readAddress(),\n      rewardTokenWallet: result.stack.readAddress(),\n      custodianAddress: result.stack.readAddressOpt(),\n      canChangeCustodian: result.stack.readBoolean(),\n      canSendRawMsg: result.stack.readBoolean(),\n      canChangeFee: result.stack.readBoolean(),\n      unrestrictedDepositRewards: result.stack.readBoolean(),\n\n      // NFTs are always soulbound in V2\n      soulboundItems: true,\n    };\n  }\n}\n"]}