import {
  DEX_OP_CODES
} from "./chunk-CWGXHOMU.js";
import {
  Contract
} from "./chunk-3QLJQGLC.js";
import {
  DEX_VERSION
} from "./chunk-4KVHWM75.js";
import {
  toAddress
} from "./chunk-HNMPFVZW.js";

// src/contracts/dex/v2_1/LpAccount/LpAccountV2_1.ts
import {
  beginCell,
  toNano
} from "@ton/ton";
var LpAccountV2_1 = class _LpAccountV2_1 extends Contract {
  static version = DEX_VERSION.v2_1;
  static gasConstants = {
    refund: toNano("0.8"),
    directAddLp: toNano("0.3"),
    resetGas: toNano("0.02")
  };
  gasConstants;
  constructor(address, { gasConstants, ...options } = {}) {
    super(address, options);
    this.gasConstants = {
      ..._LpAccountV2_1.gasConstants,
      ...gasConstants
    };
  }
  async createRefundBody(params) {
    return beginCell().storeUint(DEX_OP_CODES.REFUND_ME, 32).storeUint(params?.queryId ?? 0, 64).storeMaybeRef(params?.leftMaybePayload).storeMaybeRef(params?.rightMaybePayload).endCell();
  }
  async getRefundTxParams(provider, params) {
    const to = this.address;
    const body = await this.createRefundBody({
      leftMaybePayload: params?.leftMaybePayload,
      rightMaybePayload: params?.rightMaybePayload,
      queryId: params?.queryId
    });
    const value = BigInt(params?.gasAmount ?? this.gasConstants.refund);
    return { to, value, body };
  }
  async sendRefund(provider, via, params) {
    const txParams = await this.getRefundTxParams(provider, params);
    return via.send(txParams);
  }
  async createDirectAddLiquidityBody(params) {
    return beginCell().storeUint(DEX_OP_CODES.DIRECT_ADD_LIQUIDITY, 32).storeUint(params?.queryId ?? 0, 64).storeCoins(BigInt(params.amount0)).storeCoins(BigInt(params.amount1)).storeCoins(BigInt(params.minimumLpToMint ?? 1)).storeCoins(BigInt(params.dexCustomPayloadForwardGasAmount ?? 0)).storeAddress(toAddress(params.userWalletAddress)).storeMaybeRef(params.dexCustomPayload).storeRef(
      beginCell().storeAddress(
        toAddress(params.refundAddress ?? params.userWalletAddress)
      ).storeAddress(
        toAddress(
          params.excessesAddress ?? params.refundAddress ?? params.userWalletAddress
        )
      ).endCell()
    ).endCell();
  }
  async getDirectAddLiquidityTxParams(provider, params) {
    const to = this.address;
    const body = await this.createDirectAddLiquidityBody({
      amount0: params.amount0,
      amount1: params.amount1,
      minimumLpToMint: params.minimumLpToMint,
      userWalletAddress: params.userWalletAddress,
      refundAddress: params.refundAddress,
      excessesAddress: params.excessesAddress,
      dexCustomPayload: params.dexCustomPayload,
      dexCustomPayloadForwardGasAmount: params.dexCustomPayloadForwardGasAmount,
      queryId: params.queryId
    });
    const value = BigInt(params.gasAmount ?? this.gasConstants.directAddLp);
    return { to, value, body };
  }
  async sendDirectAddLiquidity(provider, via, params) {
    const txParams = await this.getDirectAddLiquidityTxParams(provider, params);
    return via.send(txParams);
  }
  async createResetGasBody(params) {
    return beginCell().storeUint(DEX_OP_CODES.RESET_GAS, 32).storeUint(params?.queryId ?? 0, 64).endCell();
  }
  async getResetGasTxParams(provider, params) {
    const to = this.address;
    const body = await this.createResetGasBody({
      queryId: params?.queryId
    });
    const value = BigInt(params?.gasAmount ?? this.gasConstants.resetGas);
    return { to, value, body };
  }
  async sendResetGas(provider, via, params) {
    const txParams = await this.getResetGasTxParams(provider, params);
    return via.send(txParams);
  }
  async getLpAccountData(provider) {
    const result = await provider.get("get_lp_account_data", []);
    return {
      userAddress: result.stack.readAddress(),
      poolAddress: result.stack.readAddress(),
      amount0: result.stack.readBigNumber(),
      amount1: result.stack.readBigNumber()
    };
  }
};

export {
  LpAccountV2_1
};
//# sourceMappingURL=chunk-3KKQOYNT.js.map