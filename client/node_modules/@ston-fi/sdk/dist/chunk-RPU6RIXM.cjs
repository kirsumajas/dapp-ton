"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _nullishCoalesce(lhs, rhsFn) { if (lhs != null) { return lhs; } else { return rhsFn(); } } function _optionalChain(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; } var _class;

var _chunkC3OQGEQIcjs = require('./chunk-C3OQGEQI.cjs');


var _chunkIIMQROIVcjs = require('./chunk-IIMQROIV.cjs');


var _chunkZJQ75LD3cjs = require('./chunk-ZJQ75LD3.cjs');

// src/contracts/dex/v2_1/vault/VaultV2_1.ts



var _ton = require('@ton/ton');
var VaultV2_1 = (_class = class _VaultV2_1 extends _chunkIIMQROIVcjs.Contract {
  static __initStatic() {this.version = _chunkZJQ75LD3cjs.DEX_VERSION.v2_1}
  static __initStatic2() {this.gasConstants = {
    withdrawFee: _ton.toNano.call(void 0, "0.3")
  }}
  
  constructor(address, { gasConstants, ...options } = {}) {
    super(address, options);
    this.gasConstants = {
      ..._VaultV2_1.gasConstants,
      ...gasConstants
    };
  }
  async createWithdrawFeeBody(params) {
    return _ton.beginCell.call(void 0, ).storeUint(_chunkC3OQGEQIcjs.DEX_OP_CODES.WITHDRAW_FEE, 32).storeUint(_nullishCoalesce(_optionalChain([params, 'optionalAccess', _ => _.queryId]), () => ( 0)), 64).endCell();
  }
  /**
   * Build all data required to execute a `withdraw_fee` transaction.
   *
   * @param {ContractProvider} provider - {@link ContractProvider} instance
   *
   * @param {object | undefined} params - Optional tx params
   * @param {bigint | number | string | undefined} params.gasAmount - Optional; Custom transaction gas amount (in nanoTons)
   * @param {bigint | number | undefined} params.queryId - Optional; query id
   *
   *
   * @returns {SenderArguments} all data required to execute a `withdraw_fee` transaction.
   */
  async getWithdrawFeeTxParams(provider, params) {
    const to = this.address;
    const body = await this.createWithdrawFeeBody({
      queryId: _optionalChain([params, 'optionalAccess', _2 => _2.queryId])
    });
    const value = BigInt(_nullishCoalesce(_optionalChain([params, 'optionalAccess', _3 => _3.gasAmount]), () => ( this.gasConstants.withdrawFee)));
    return { to, body, value };
  }
  async sendWithdrawFee(provider, via, params) {
    const txParams = await this.getWithdrawFeeTxParams(provider, params);
    return via.send(txParams);
  }
  /**
   * Get the current state of the vault contract.
   *
   * @param {ContractProvider} provider - {@link ContractProvider} instance
   *
   *
   * @returns {Promise<object>} structure containing the current state of the vault contract.
   */
  async getVaultData(provider) {
    const result = await provider.get("get_vault_data", []);
    return {
      ownerAddress: result.stack.readAddress(),
      tokenAddress: result.stack.readAddress(),
      routerAddress: result.stack.readAddress(),
      depositedAmount: result.stack.readBigNumber()
    };
  }
}, _class.__initStatic(), _class.__initStatic2(), _class);



exports.VaultV2_1 = VaultV2_1;
//# sourceMappingURL=chunk-RPU6RIXM.cjs.map