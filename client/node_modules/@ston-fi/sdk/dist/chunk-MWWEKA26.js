import {
  pTON_OP_CODES
} from "./chunk-WC6BMQXZ.js";
import {
  pTON_VERSION
} from "./chunk-MEGJZKYP.js";
import {
  JettonMinter
} from "./chunk-S2MQPWHB.js";
import {
  createJettonTransferMessage
} from "./chunk-5Z5Z5A3U.js";
import {
  toAddress
} from "./chunk-HNMPFVZW.js";

// src/contracts/pTON/v1/PtonV1.ts
import {
  address,
  beginCell,
  toNano
} from "@ton/ton";
var PtonV1 = class _PtonV1 extends JettonMinter {
  static version = pTON_VERSION.v1;
  static address = address(
    "EQCM3B12QK1e4yZSf8GtBRT0aLMNyEsBc_DhVfRRtOEffLez"
  );
  static gasConstants = {
    deployWallet: toNano("1.05")
  };
  version = _PtonV1.version;
  gasConstants;
  constructor(address2 = _PtonV1.address, { gasConstants, ...options } = {}) {
    super(address2, options);
    this.gasConstants = {
      ..._PtonV1.gasConstants,
      ...gasConstants
    };
  }
  async getTonTransferTxParams(provider, params) {
    const to = await this.getWalletAddress(provider, params.destinationAddress);
    const body = createJettonTransferMessage({
      queryId: params.queryId ?? 0,
      amount: params.tonAmount,
      destination: params.destinationAddress,
      forwardTonAmount: BigInt(params.forwardTonAmount ?? 0),
      forwardPayload: params.forwardPayload
    });
    const value = BigInt(params.tonAmount) + BigInt(params.forwardTonAmount ?? 0);
    return { to, value, body };
  }
  async sendTonTransfer(provider, via, params) {
    const txParams = await this.getTonTransferTxParams(provider, params);
    return via.send(txParams);
  }
  async createDeployWalletBody(params) {
    return beginCell().storeUint(pTON_OP_CODES.DEPLOY_WALLET, 32).storeUint(params.queryId ?? 0, 64).storeAddress(toAddress(params.ownerAddress)).endCell();
  }
  async getDeployWalletTxParams(provider, params) {
    const to = this.address;
    const body = await this.createDeployWalletBody({
      ownerAddress: params.ownerAddress,
      queryId: params?.queryId
    });
    const value = BigInt(params?.gasAmount ?? this.gasConstants.deployWallet);
    return { to, value, body };
  }
  async sendDeployWallet(provider, via, params) {
    const txParams = await this.getDeployWalletTxParams(provider, params);
    return via.send(txParams);
  }
};

export {
  PtonV1
};
//# sourceMappingURL=chunk-MWWEKA26.js.map