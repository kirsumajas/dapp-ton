{"version":3,"sources":["../src/contracts/dex/v2_1/pool/BasePoolV2_1.ts"],"sourcesContent":["import {\n  type Cell,\n  type ContractProvider,\n  type Sender,\n  type SenderArguments,\n  beginCell,\n  toNano,\n} from \"@ton/ton\";\n\nimport type { AddressType, AmountType, QueryIdType } from \"../../../../types\";\nimport { toAddress } from \"../../../../utils/toAddress\";\nimport type { ContractOptions } from \"../../../core/Contract\";\nimport { JettonMinter } from \"../../../core/JettonMinter\";\nimport { JettonWallet } from \"../../../core/JettonWallet\";\nimport { type DEX_TYPE, DEX_VERSION } from \"../../constants\";\nimport { LpAccountV2_1 } from \"../LpAccount/LpAccountV2_1\";\nimport { DEX_OP_CODES } from \"../constants\";\n\nexport interface BasePoolV2_1Options extends ContractOptions {\n  gasConstants?: Partial<typeof BasePoolV2_1.gasConstants>;\n}\n\nexport class BasePoolV2_1 extends JettonMinter {\n  public static readonly version: DEX_VERSION = DEX_VERSION.v2_1;\n\n  public static readonly gasConstants = {\n    collectFees: toNano(\"0.4\"),\n    burn: toNano(\"0.8\"),\n  };\n\n  public readonly gasConstants;\n\n  constructor(\n    address: AddressType,\n    { gasConstants, ...options }: BasePoolV2_1Options = {},\n  ) {\n    super(address, options);\n\n    this.gasConstants = {\n      ...BasePoolV2_1.gasConstants,\n      ...gasConstants,\n    };\n  }\n\n  public async createCollectFeesBody(params?: {\n    queryId?: QueryIdType;\n  }): Promise<Cell> {\n    return beginCell()\n      .storeUint(DEX_OP_CODES.COLLECT_FEES, 32)\n      .storeUint(params?.queryId ?? 0, 64)\n      .endCell();\n  }\n\n  public async getCollectFeeTxParams(\n    provider: ContractProvider,\n    params?: {\n      gasAmount?: AmountType;\n      queryId?: QueryIdType;\n    },\n  ): Promise<SenderArguments> {\n    const to = this.address;\n\n    const body = await this.createCollectFeesBody({\n      queryId: params?.queryId,\n    });\n\n    const value = BigInt(params?.gasAmount ?? this.gasConstants.collectFees);\n\n    return { to, value, body };\n  }\n\n  public async sendCollectFees(\n    provider: ContractProvider,\n    via: Sender,\n    params: Parameters<BasePoolV2_1[\"getCollectFeeTxParams\"]>[1],\n  ) {\n    const txParams = await this.getCollectFeeTxParams(provider, params);\n\n    return via.send(txParams);\n  }\n\n  public async createBurnBody(params: {\n    amount: AmountType;\n    dexCustomPayload?: Cell;\n    queryId?: QueryIdType;\n  }): Promise<Cell> {\n    return beginCell()\n      .storeUint(DEX_OP_CODES.BURN, 32)\n      .storeUint(params?.queryId ?? 0, 64)\n      .storeCoins(BigInt(params.amount))\n      .storeAddress(null)\n      .storeMaybeRef(params.dexCustomPayload)\n      .endCell();\n  }\n\n  public async getBurnTxParams(\n    provider: ContractProvider,\n    params: {\n      amount: AmountType;\n      userWalletAddress: AddressType;\n      dexCustomPayload?: Cell;\n      gasAmount?: AmountType;\n      queryId?: QueryIdType;\n    },\n  ): Promise<SenderArguments> {\n    const [to, body] = await Promise.all([\n      this.getWalletAddress(provider, params.userWalletAddress),\n      this.createBurnBody({\n        amount: params.amount,\n        dexCustomPayload: params.dexCustomPayload,\n        queryId: params.queryId,\n      }),\n    ]);\n\n    const value = BigInt(params.gasAmount ?? this.gasConstants.burn);\n\n    return { to, value, body };\n  }\n\n  public async sendBurn(\n    provider: ContractProvider,\n    via: Sender,\n    params: Parameters<BasePoolV2_1[\"getBurnTxParams\"]>[1],\n  ) {\n    const txParams = await this.getBurnTxParams(provider, params);\n\n    return via.send(txParams);\n  }\n\n  public async getPoolType(provider: ContractProvider) {\n    const result = await provider.get(\"get_pool_type\", []);\n\n    return result.stack.readString() as DEX_TYPE;\n  }\n\n  public async getLpAccountAddress(\n    provider: ContractProvider,\n    params: {\n      ownerAddress: AddressType;\n    },\n  ) {\n    const result = await provider.get(\"get_lp_account_address\", [\n      {\n        type: \"slice\",\n        cell: beginCell()\n          .storeAddress(toAddress(params.ownerAddress))\n          .endCell(),\n      },\n    ]);\n\n    return result.stack.readAddress();\n  }\n\n  public async getLpAccount(\n    provider: ContractProvider,\n    params: {\n      ownerAddress: AddressType;\n    },\n  ) {\n    const lpAccountAddress = await this.getLpAccountAddress(provider, params);\n\n    return LpAccountV2_1.create(lpAccountAddress);\n  }\n\n  public async getJettonWallet(\n    provider: ContractProvider,\n    params: {\n      ownerAddress: AddressType;\n    },\n  ) {\n    const jettonWalletAddress = await this.getWalletAddress(\n      provider,\n      params.ownerAddress,\n    );\n\n    return JettonWallet.create(jettonWalletAddress);\n  }\n\n  public async getPoolData(provider: ContractProvider) {\n    const data = await this.implGetPoolData(provider);\n\n    return data.commonPoolData;\n  }\n\n  protected async implGetPoolData(provider: ContractProvider) {\n    const result = await provider.get(\"get_pool_data\", []);\n\n    return {\n      commonPoolData: {\n        isLocked: result.stack.readBoolean(),\n        routerAddress: result.stack.readAddress(),\n        totalSupplyLP: result.stack.readBigNumber(),\n        reserve0: result.stack.readBigNumber(),\n        reserve1: result.stack.readBigNumber(),\n        token0WalletAddress: result.stack.readAddress(),\n        token1WalletAddress: result.stack.readAddress(),\n        lpFee: result.stack.readBigNumber(),\n        protocolFee: result.stack.readBigNumber(),\n        protocolFeeAddress: result.stack.readAddressOpt(),\n        collectedToken0ProtocolFee: result.stack.readBigNumber(),\n        collectedToken1ProtocolFee: result.stack.readBigNumber(),\n      },\n      stack: result.stack,\n    };\n  }\n}\n"],"mappings":"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","names":[]}